{"version":3,"file":"vendors-node_modules_pnpm_react-native-webview_13_8_4_react-native_0_71_8_react_18_2_0_node_m-225474.chunk.bundle","mappings":"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","sources":["webpack:///../../node_modules/.pnpm/react-native-webview@13.8.4_react-native@0.71.8_react@18.2.0/node_modules/react-native-webview/src/NativeRNCWebView.ts","webpack:///../../node_modules/.pnpm/react-native-webview@13.8.4_react-native@0.71.8_react@18.2.0/node_modules/react-native-webview/src/RNCWebViewNativeComponent.ts","webpack:///../../node_modules/.pnpm/react-native-webview@13.8.4_react-native@0.71.8_react@18.2.0/node_modules/react-native-webview/src/WebView.ios.tsx","webpack:///../../node_modules/.pnpm/react-native-webview@13.8.4_react-native@0.71.8_react@18.2.0/node_modules/react-native-webview/src/WebView.styles.ts","webpack:///../../node_modules/.pnpm/react-native-webview@13.8.4_react-native@0.71.8_react@18.2.0/node_modules/react-native-webview/src/WebViewShared.tsx","webpack:///../../node_modules/.pnpm/react-native-webview@13.8.4_react-native@0.71.8_react@18.2.0/node_modules/react-native-webview/src/index.ts","webpack:///../../node_modules/.pnpm/react-native@0.71.8_@babel+core@7.23.0_@babel+preset-env@7.22.20_react@18.2.0/node_modules/react-native/Libraries/ReactNative/requireNativeComponent.js","webpack:///../../node_modules/.pnpm/react-native@0.71.8_@babel+core@7.23.0_@babel+preset-env@7.22.20_react@18.2.0/node_modules/react-native/Libraries/Renderer/shims/createReactNativeComponentClass.js","webpack:///../../node_modules/.pnpm/react-native@0.71.8_@babel+core@7.23.0_@babel+preset-env@7.22.20_react@18.2.0/node_modules/react-native/Libraries/Utilities/codegenNativeComponent.js","webpack:///../../node_modules/.pnpm/escape-string-regexp@2.0.0/node_modules/escape-string-regexp/index.js"],"sourcesContent":["import type { TurboModule } from 'react-native';\nimport { TurboModuleRegistry } from 'react-native';\nimport { Double } from 'react-native/Libraries/Types/CodegenTypes';\n\nexport interface Spec extends TurboModule {\n  readonly getConstants: () => {};\n\n  // your module methods go here, for example:\n  isFileUploadSupported(): Promise<boolean>;\n  shouldStartLoadWithLockIdentifier(\n    shouldStart: boolean,\n    lockIdentifier: Double\n  ): void;\n}\n\nexport default TurboModuleRegistry.getEnforcing<Spec>('RNCWebView');\n","import type { HostComponent, ViewProps } from 'react-native';\nimport codegenNativeComponent from 'react-native/Libraries/Utilities/codegenNativeComponent';\nimport {\n  DirectEventHandler,\n  Double,\n  Int32,\n  WithDefault,\n} from 'react-native/Libraries/Types/CodegenTypes';\nimport codegenNativeCommands from 'react-native/Libraries/Utilities/codegenNativeCommands';\n\nexport type WebViewNativeEvent = Readonly<{\n  url: string;\n  loading: boolean;\n  title: string;\n  canGoBack: boolean;\n  canGoForward: boolean;\n  lockIdentifier: Double;\n}>;\nexport type WebViewCustomMenuSelectionEvent = Readonly<{\n  label: string;\n  key: string;\n  selectedText: string;\n}>;\nexport type WebViewMessageEvent = Readonly<{\n  url: string;\n  loading: boolean;\n  title: string;\n  canGoBack: boolean;\n  canGoForward: boolean;\n  lockIdentifier: Double;\n  data: string;\n}>;\nexport type WebViewOpenWindowEvent = Readonly<{\n  targetUrl: string;\n}>;\nexport type WebViewHttpErrorEvent = Readonly<{\n  url: string;\n  loading: boolean;\n  title: string;\n  canGoBack: boolean;\n  canGoForward: boolean;\n  lockIdentifier: Double;\n  description: string;\n  statusCode: Int32;\n}>;\n\nexport type WebViewErrorEvent = Readonly<{\n  url: string;\n  loading: boolean;\n  title: string;\n  canGoBack: boolean;\n  canGoForward: boolean;\n  lockIdentifier: Double;\n  domain?: string;\n  code: Int32;\n  description: string;\n}>;\n\nexport type WebViewNativeProgressEvent = Readonly<{\n  url: string;\n  loading: boolean;\n  title: string;\n  canGoBack: boolean;\n  canGoForward: boolean;\n  lockIdentifier: Double;\n  progress: Double;\n}>;\n\nexport type WebViewNavigationEvent = Readonly<{\n  url: string;\n  loading: boolean;\n  title: string;\n  canGoBack: boolean;\n  canGoForward: boolean;\n  lockIdentifier: Double;\n  navigationType:\n    | 'click'\n    | 'formsubmit'\n    | 'backforward'\n    | 'reload'\n    | 'formresubmit'\n    | 'other';\n  mainDocumentURL?: string;\n}>;\n\nexport type ShouldStartLoadRequestEvent = Readonly<{\n  url: string;\n  loading: boolean;\n  title: string;\n  canGoBack: boolean;\n  canGoForward: boolean;\n  lockIdentifier: Double;\n  navigationType:\n    | 'click'\n    | 'formsubmit'\n    | 'backforward'\n    | 'reload'\n    | 'formresubmit'\n    | 'other';\n  mainDocumentURL?: string;\n  isTopFrame: boolean;\n}>;\n\ntype ScrollEvent = Readonly<{\n  contentInset: {\n    bottom: Double;\n    left: Double;\n    right: Double;\n    top: Double;\n  };\n  contentOffset: {\n    y: Double;\n    x: Double;\n  };\n  contentSize: {\n    height: Double;\n    width: Double;\n  };\n  layoutMeasurement: {\n    height: Double;\n    width: Double;\n  };\n  targetContentOffset?: {\n    y: Double;\n    x: Double;\n  };\n  velocity?: {\n    y: Double;\n    x: Double;\n  };\n  zoomScale?: Double;\n  responderIgnoreScroll?: boolean;\n}>;\n\ntype WebViewRenderProcessGoneEvent = Readonly<{\n  didCrash: boolean;\n}>;\n\ntype WebViewDownloadEvent = Readonly<{\n  downloadUrl: string;\n}>;\n\n// type MenuItem = Readonly<{label: string, key: string}>;\n\nexport interface NativeProps extends ViewProps {\n  // Android only\n  allowFileAccess?: boolean;\n  allowsProtectedMedia?: boolean;\n  allowsFullscreenVideo?: boolean;\n  androidLayerType?: WithDefault<'none' | 'software' | 'hardware', 'none'>;\n  cacheMode?: WithDefault<\n    | 'LOAD_DEFAULT'\n    | 'LOAD_CACHE_ELSE_NETWORK'\n    | 'LOAD_NO_CACHE'\n    | 'LOAD_CACHE_ONLY',\n    'LOAD_DEFAULT'\n  >;\n  domStorageEnabled?: boolean;\n  downloadingMessage?: string;\n  forceDarkOn?: boolean;\n  geolocationEnabled?: boolean;\n  lackPermissionToDownloadMessage?: string;\n  messagingModuleName: string;\n  minimumFontSize?: Int32;\n  mixedContentMode?: WithDefault<'never' | 'always' | 'compatibility', 'never'>;\n  nestedScrollEnabled?: boolean;\n  onContentSizeChange?: DirectEventHandler<WebViewNativeEvent>;\n  onRenderProcessGone?: DirectEventHandler<WebViewRenderProcessGoneEvent>;\n  overScrollMode?: string;\n  saveFormDataDisabled?: boolean;\n  scalesPageToFit?: boolean;\n  setBuiltInZoomControls?: boolean;\n  setDisplayZoomControls?: boolean;\n  setSupportMultipleWindows?: boolean;\n  textZoom?: Int32;\n  thirdPartyCookiesEnabled?: boolean;\n  // Workaround to watch if listener if defined\n  hasOnScroll?: boolean;\n  // !Android only\n\n  // iOS only\n  allowingReadAccessToURL?: string;\n  allowsBackForwardNavigationGestures?: boolean;\n  allowsInlineMediaPlayback?: boolean;\n  allowsAirPlayForMediaPlayback?: boolean;\n  allowsLinkPreview?: boolean;\n  automaticallyAdjustContentInsets?: boolean;\n  autoManageStatusBarEnabled?: boolean;\n  bounces?: boolean;\n  contentInset?: Readonly<{\n    top?: Double;\n    left?: Double;\n    bottom?: Double;\n    right?: Double;\n  }>;\n  contentInsetAdjustmentBehavior?: WithDefault<\n    'never' | 'automatic' | 'scrollableAxes' | 'always',\n    'never'\n  >;\n  contentMode?: WithDefault<\n    'recommended' | 'mobile' | 'desktop',\n    'recommended'\n  >;\n  dataDetectorTypes?: WithDefault<\n    ReadonlyArray<\n      | 'address'\n      | 'link'\n      | 'calendarEvent'\n      | 'trackingNumber'\n      | 'flightNumber'\n      | 'lookupSuggestion'\n      | 'phoneNumber'\n      | 'all'\n      | 'none'\n    >,\n    'phoneNumber'\n  >;\n  decelerationRate?: Double;\n  directionalLockEnabled?: boolean;\n  enableApplePay?: boolean;\n  hideKeyboardAccessoryView?: boolean;\n  keyboardDisplayRequiresUserAction?: boolean;\n  limitsNavigationsToAppBoundDomains?: boolean;\n  mediaCapturePermissionGrantType?: WithDefault<\n    | 'prompt'\n    | 'grant'\n    | 'deny'\n    | 'grantIfSameHostElsePrompt'\n    | 'grantIfSameHostElseDeny',\n    'prompt'\n  >;\n  pagingEnabled?: boolean;\n  pullToRefreshEnabled?: boolean;\n  scrollEnabled?: boolean;\n  sharedCookiesEnabled?: boolean;\n  textInteractionEnabled?: boolean;\n  useSharedProcessPool?: boolean;\n  onContentProcessDidTerminate?: DirectEventHandler<WebViewNativeEvent>;\n  onCustomMenuSelection?: DirectEventHandler<WebViewCustomMenuSelectionEvent>;\n  onFileDownload?: DirectEventHandler<WebViewDownloadEvent>;\n\n  menuItems?: ReadonlyArray<Readonly<{ label: string; key: string }>>;\n  suppressMenuItems?: Readonly<string>[];\n  // Workaround to watch if listener if defined\n  hasOnFileDownload?: boolean;\n  fraudulentWebsiteWarningEnabled?: boolean;\n  // !iOS only\n\n  allowFileAccessFromFileURLs?: boolean;\n  allowUniversalAccessFromFileURLs?: boolean;\n  applicationNameForUserAgent?: string;\n  basicAuthCredential?: Readonly<{\n    username: string;\n    password: string;\n  }>;\n  cacheEnabled?: boolean;\n  incognito?: boolean;\n  injectedJavaScript?: string;\n  injectedJavaScriptBeforeContentLoaded?: string;\n  injectedJavaScriptForMainFrameOnly?: boolean;\n  injectedJavaScriptBeforeContentLoadedForMainFrameOnly?: boolean;\n  javaScriptCanOpenWindowsAutomatically?: boolean;\n  javaScriptEnabled?: boolean;\n  webviewDebuggingEnabled?: boolean;\n  mediaPlaybackRequiresUserAction?: boolean;\n  messagingEnabled: boolean;\n  onLoadingError: DirectEventHandler<WebViewErrorEvent>;\n  onLoadingFinish: DirectEventHandler<WebViewNavigationEvent>;\n  onLoadingProgress: DirectEventHandler<WebViewNativeProgressEvent>;\n  onLoadingStart: DirectEventHandler<WebViewNavigationEvent>;\n  onHttpError: DirectEventHandler<WebViewHttpErrorEvent>;\n  onMessage: DirectEventHandler<WebViewMessageEvent>;\n  onOpenWindow?: DirectEventHandler<WebViewOpenWindowEvent>;\n  hasOnOpenWindowEvent?: boolean;\n  onScroll?: DirectEventHandler<ScrollEvent>;\n  onShouldStartLoadWithRequest: DirectEventHandler<ShouldStartLoadRequestEvent>;\n  showsHorizontalScrollIndicator?: boolean;\n  showsVerticalScrollIndicator?: boolean;\n  newSource: Readonly<{\n    uri?: string;\n    method?: string;\n    body?: string;\n\n    headers?: ReadonlyArray<Readonly<{ name: string; value: string }>>;\n    html?: string;\n    baseUrl?: string;\n  }>;\n  userAgent?: string;\n  injectedJavaScriptObject?: string;\n}\n\nexport interface NativeCommands {\n  goBack: (viewRef: React.ElementRef<HostComponent<NativeProps>>) => void;\n  goForward: (viewRef: React.ElementRef<HostComponent<NativeProps>>) => void;\n  reload: (viewRef: React.ElementRef<HostComponent<NativeProps>>) => void;\n  stopLoading: (viewRef: React.ElementRef<HostComponent<NativeProps>>) => void;\n  injectJavaScript: (\n    viewRef: React.ElementRef<HostComponent<NativeProps>>,\n    javascript: string\n  ) => void;\n  requestFocus: (viewRef: React.ElementRef<HostComponent<NativeProps>>) => void;\n  postMessage: (\n    viewRef: React.ElementRef<HostComponent<NativeProps>>,\n    data: string\n  ) => void;\n  // Android Only\n  loadUrl: (\n    viewRef: React.ElementRef<HostComponent<NativeProps>>,\n    url: string\n  ) => void;\n  clearFormData: (\n    viewRef: React.ElementRef<HostComponent<NativeProps>>\n  ) => void;\n  clearCache: (\n    viewRef: React.ElementRef<HostComponent<NativeProps>>,\n    includeDiskFiles: boolean\n  ) => void;\n  clearHistory: (viewRef: React.ElementRef<HostComponent<NativeProps>>) => void;\n  // !Android Only\n}\n\nexport const Commands = codegenNativeCommands<NativeCommands>({\n  supportedCommands: [\n    'goBack',\n    'goForward',\n    'reload',\n    'stopLoading',\n    'injectJavaScript',\n    'requestFocus',\n    'postMessage',\n    'loadUrl',\n    'clearFormData',\n    'clearCache',\n    'clearHistory',\n  ],\n});\n\nexport default codegenNativeComponent<NativeProps>(\n  'RNCWebView'\n) as HostComponent<NativeProps>;\n","import React, {\n  forwardRef,\n  useCallback,\n  useImperativeHandle,\n  useRef,\n} from 'react';\nimport { Image, View, ImageSourcePropType, HostComponent } from 'react-native';\nimport invariant from 'invariant';\n\nimport RNCWebView, { Commands, NativeProps } from './RNCWebViewNativeComponent';\nimport RNCWebViewModule from './NativeRNCWebView';\n\nimport {\n  defaultOriginWhitelist,\n  defaultRenderError,\n  defaultRenderLoading,\n  useWebViewLogic,\n} from './WebViewShared';\nimport {\n  IOSWebViewProps,\n  DecelerationRateConstant,\n  WebViewSourceUri,\n} from './WebViewTypes';\n\nimport styles from './WebView.styles';\n\nconst { resolveAssetSource } = Image;\nconst processDecelerationRate = (\n  decelerationRate: DecelerationRateConstant | number | undefined\n) => {\n  let newDecelerationRate = decelerationRate;\n  if (newDecelerationRate === 'normal') {\n    newDecelerationRate = 0.998;\n  } else if (newDecelerationRate === 'fast') {\n    newDecelerationRate = 0.99;\n  }\n  return newDecelerationRate;\n};\n\nconst useWarnIfChanges = <T extends unknown>(value: T, name: string) => {\n  const ref = useRef(value);\n  if (ref.current !== value) {\n    console.warn(\n      `Changes to property ${name} do nothing after the initial render.`\n    );\n    ref.current = value;\n  }\n};\n\nconst WebViewComponent = forwardRef<{}, IOSWebViewProps>(\n  (\n    {\n      fraudulentWebsiteWarningEnabled = true,\n      javaScriptEnabled = true,\n      cacheEnabled = true,\n      originWhitelist = defaultOriginWhitelist,\n      useSharedProcessPool = true,\n      textInteractionEnabled = true,\n      injectedJavaScript,\n      injectedJavaScriptBeforeContentLoaded,\n      injectedJavaScriptForMainFrameOnly = true,\n      injectedJavaScriptBeforeContentLoadedForMainFrameOnly = true,\n      injectedJavaScriptObject,\n      startInLoadingState,\n      onNavigationStateChange,\n      onLoadStart,\n      onError,\n      onLoad,\n      onLoadEnd,\n      onLoadProgress,\n      onContentProcessDidTerminate: onContentProcessDidTerminateProp,\n      onFileDownload,\n      onHttpError: onHttpErrorProp,\n      onMessage: onMessageProp,\n      onOpenWindow: onOpenWindowProp,\n      renderLoading,\n      renderError,\n      style,\n      containerStyle,\n      source,\n      nativeConfig,\n      allowsInlineMediaPlayback,\n      allowsAirPlayForMediaPlayback,\n      mediaPlaybackRequiresUserAction,\n      dataDetectorTypes,\n      incognito,\n      decelerationRate: decelerationRateProp,\n      onShouldStartLoadWithRequest: onShouldStartLoadWithRequestProp,\n      ...otherProps\n    },\n    ref\n  ) => {\n    const webViewRef = useRef<React.ComponentRef<\n      HostComponent<NativeProps>\n    > | null>(null);\n\n    const onShouldStartLoadWithRequestCallback = useCallback(\n      (shouldStart: boolean, _url: string, lockIdentifier = 0) => {\n        RNCWebViewModule.shouldStartLoadWithLockIdentifier(\n          shouldStart,\n          lockIdentifier\n        );\n      },\n      []\n    );\n\n    const {\n      onLoadingStart,\n      onShouldStartLoadWithRequest,\n      onMessage,\n      viewState,\n      setViewState,\n      lastErrorEvent,\n      onHttpError,\n      onLoadingError,\n      onLoadingFinish,\n      onLoadingProgress,\n      onOpenWindow,\n      onContentProcessDidTerminate,\n    } = useWebViewLogic({\n      onNavigationStateChange,\n      onLoad,\n      onError,\n      onHttpErrorProp,\n      onLoadEnd,\n      onLoadProgress,\n      onLoadStart,\n      onMessageProp,\n      onOpenWindowProp,\n      startInLoadingState,\n      originWhitelist,\n      onShouldStartLoadWithRequestProp,\n      onShouldStartLoadWithRequestCallback,\n      onContentProcessDidTerminateProp,\n    });\n\n    useImperativeHandle(\n      ref,\n      () => ({\n        goForward: () =>\n          webViewRef.current && Commands.goForward(webViewRef.current),\n        goBack: () => webViewRef.current && Commands.goBack(webViewRef.current),\n        reload: () => {\n          setViewState('LOADING');\n          if (webViewRef.current) {\n            Commands.reload(webViewRef.current);\n          }\n        },\n        stopLoading: () =>\n          webViewRef.current && Commands.stopLoading(webViewRef.current),\n        postMessage: (data: string) =>\n          webViewRef.current && Commands.postMessage(webViewRef.current, data),\n        injectJavaScript: (data: string) =>\n          webViewRef.current &&\n          Commands.injectJavaScript(webViewRef.current, data),\n        requestFocus: () =>\n          webViewRef.current && Commands.requestFocus(webViewRef.current),\n        clearCache: (includeDiskFiles: boolean) =>\n          webViewRef.current &&\n          Commands.clearCache(webViewRef.current, includeDiskFiles),\n      }),\n      [setViewState, webViewRef]\n    );\n\n    useWarnIfChanges(allowsInlineMediaPlayback, 'allowsInlineMediaPlayback');\n    useWarnIfChanges(\n      allowsAirPlayForMediaPlayback,\n      'allowsAirPlayForMediaPlayback'\n    );\n    useWarnIfChanges(incognito, 'incognito');\n    useWarnIfChanges(\n      mediaPlaybackRequiresUserAction,\n      'mediaPlaybackRequiresUserAction'\n    );\n    useWarnIfChanges(dataDetectorTypes, 'dataDetectorTypes');\n\n    let otherView = null;\n    if (viewState === 'LOADING') {\n      otherView = (renderLoading || defaultRenderLoading)();\n    } else if (viewState === 'ERROR') {\n      invariant(\n        lastErrorEvent != null,\n        'lastErrorEvent expected to be non-null'\n      );\n      otherView = (renderError || defaultRenderError)(\n        lastErrorEvent?.domain,\n        lastErrorEvent?.code ?? 0,\n        lastErrorEvent?.description ?? ''\n      );\n    } else if (viewState !== 'IDLE') {\n      console.error(`RNCWebView invalid state encountered: ${viewState}`);\n    }\n\n    const webViewStyles = [styles.container, styles.webView, style];\n    const webViewContainerStyle = [styles.container, containerStyle];\n\n    const decelerationRate = processDecelerationRate(decelerationRateProp);\n\n    const NativeWebView =\n      (nativeConfig?.component as typeof RNCWebView | undefined) || RNCWebView;\n\n    const sourceResolved = resolveAssetSource(source as ImageSourcePropType);\n    const newSource =\n      typeof sourceResolved === 'object'\n        ? Object.entries(sourceResolved as WebViewSourceUri).reduce(\n            (prev, [currKey, currValue]) => {\n              return {\n                ...prev,\n                [currKey]:\n                  currKey === 'headers' &&\n                  currValue &&\n                  typeof currValue === 'object'\n                    ? Object.entries(currValue).map(([key, value]) => {\n                        return {\n                          name: key,\n                          value,\n                        };\n                      })\n                    : currValue,\n              };\n            },\n            {}\n          )\n        : sourceResolved;\n\n    const webView = (\n      <NativeWebView\n        key=\"webViewKey\"\n        {...otherProps}\n        fraudulentWebsiteWarningEnabled={fraudulentWebsiteWarningEnabled}\n        javaScriptEnabled={javaScriptEnabled}\n        cacheEnabled={cacheEnabled}\n        useSharedProcessPool={useSharedProcessPool}\n        textInteractionEnabled={textInteractionEnabled}\n        decelerationRate={decelerationRate}\n        messagingEnabled={typeof onMessageProp === 'function'}\n        messagingModuleName=\"\" // android ONLY\n        onLoadingError={onLoadingError}\n        onLoadingFinish={onLoadingFinish}\n        onLoadingProgress={onLoadingProgress}\n        onFileDownload={onFileDownload}\n        onLoadingStart={onLoadingStart}\n        onHttpError={onHttpError}\n        onMessage={onMessage}\n        onOpenWindow={onOpenWindowProp && onOpenWindow}\n        hasOnOpenWindowEvent={onOpenWindowProp !== undefined}\n        onShouldStartLoadWithRequest={onShouldStartLoadWithRequest}\n        onContentProcessDidTerminate={onContentProcessDidTerminate}\n        injectedJavaScript={injectedJavaScript}\n        injectedJavaScriptBeforeContentLoaded={\n          injectedJavaScriptBeforeContentLoaded\n        }\n        injectedJavaScriptForMainFrameOnly={injectedJavaScriptForMainFrameOnly}\n        injectedJavaScriptBeforeContentLoadedForMainFrameOnly={\n          injectedJavaScriptBeforeContentLoadedForMainFrameOnly\n        }\n        injectedJavaScriptObject={JSON.stringify(injectedJavaScriptObject)}\n        dataDetectorTypes={\n          !dataDetectorTypes || Array.isArray(dataDetectorTypes)\n            ? dataDetectorTypes\n            : [dataDetectorTypes]\n        }\n        allowsAirPlayForMediaPlayback={allowsAirPlayForMediaPlayback}\n        allowsInlineMediaPlayback={allowsInlineMediaPlayback}\n        incognito={incognito}\n        mediaPlaybackRequiresUserAction={mediaPlaybackRequiresUserAction}\n        newSource={newSource}\n        style={webViewStyles}\n        hasOnFileDownload={!!onFileDownload}\n        ref={webViewRef}\n        // @ts-expect-error old arch only\n        source={sourceResolved}\n        {...nativeConfig?.props}\n      />\n    );\n\n    return (\n      <View style={webViewContainerStyle}>\n        {webView}\n        {otherView}\n      </View>\n    );\n  }\n);\n\n// no native implementation for iOS, depends only on permissions\nconst isFileUploadSupported: () => Promise<boolean> = async () => true;\n\nconst WebView = Object.assign(WebViewComponent, { isFileUploadSupported });\n\nexport default WebView;\n","import { StyleSheet } from 'react-native';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  loadingOrErrorView: {\n    position: 'absolute',\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: '100%',\n    width: '100%',\n    backgroundColor: 'white',\n  },\n  loadingProgressBar: {\n    height: 20,\n  },\n  errorText: {\n    fontSize: 14,\n    textAlign: 'center',\n    marginBottom: 2,\n  },\n  errorTextTitle: {\n    fontSize: 15,\n    fontWeight: '500',\n    marginBottom: 10,\n  },\n  webView: {\n    backgroundColor: '#ffffff',\n  },\n  flexStart: {\n    alignSelf: 'flex-start',\n  },\n  colorRed: {\n    color: 'red',\n  },\n});\n\nexport default styles;\n","import escapeStringRegexp from 'escape-string-regexp';\nimport React, { useCallback, useMemo, useRef, useState } from 'react';\nimport { Linking, View, ActivityIndicator, Text, Platform } from 'react-native';\nimport {\n  OnShouldStartLoadWithRequest,\n  ShouldStartLoadRequestEvent,\n  WebViewError,\n  WebViewErrorEvent,\n  WebViewHttpErrorEvent,\n  WebViewMessageEvent,\n  WebViewNavigation,\n  WebViewNavigationEvent,\n  WebViewOpenWindowEvent,\n  WebViewProgressEvent,\n  WebViewRenderProcessGoneEvent,\n  WebViewTerminatedEvent,\n} from './WebViewTypes';\nimport styles from './WebView.styles';\n\nconst defaultOriginWhitelist = ['http://*', 'https://*'] as const;\n\nconst extractOrigin = (url: string): string => {\n  const result = /^[A-Za-z][A-Za-z0-9+\\-.]+:(\\/\\/)?[^/]*/.exec(url);\n  return result === null ? '' : result[0];\n};\n\nconst originWhitelistToRegex = (originWhitelist: string): string =>\n  `^${escapeStringRegexp(originWhitelist).replace(/\\\\\\*/g, '.*')}`;\n\nconst passesWhitelist = (compiledWhitelist: readonly string[], url: string) => {\n  const origin = extractOrigin(url);\n  return compiledWhitelist.some((x) => new RegExp(x).test(origin));\n};\n\nconst compileWhitelist = (\n  originWhitelist: readonly string[]\n): readonly string[] =>\n  ['about:blank', ...(originWhitelist || [])].map(originWhitelistToRegex);\n\nconst createOnShouldStartLoadWithRequest = (\n  loadRequest: (\n    shouldStart: boolean,\n    url: string,\n    lockIdentifier: number\n  ) => void,\n  originWhitelist: readonly string[],\n  onShouldStartLoadWithRequest?: OnShouldStartLoadWithRequest\n) => {\n  return ({ nativeEvent }: ShouldStartLoadRequestEvent) => {\n    let shouldStart = true;\n    const { url, lockIdentifier } = nativeEvent;\n\n    if (!passesWhitelist(compileWhitelist(originWhitelist), url)) {\n      Linking.canOpenURL(url)\n        .then((supported) => {\n          if (supported) {\n            return Linking.openURL(url);\n          }\n          console.warn(`Can't open url: ${url}`);\n          return undefined;\n        })\n        .catch((e) => {\n          console.warn('Error opening URL: ', e);\n        });\n      shouldStart = false;\n    } else if (onShouldStartLoadWithRequest) {\n      shouldStart = onShouldStartLoadWithRequest(nativeEvent);\n    }\n\n    loadRequest(shouldStart, url, lockIdentifier);\n  };\n};\n\nconst defaultRenderLoading = () => (\n  <View style={styles.loadingOrErrorView}>\n    <ActivityIndicator />\n  </View>\n);\nconst defaultRenderError = (\n  errorDomain: string | undefined,\n  errorCode: number,\n  errorDesc: string\n) => (\n  <View style={styles.loadingOrErrorView}>\n    <Text style={styles.errorTextTitle}>Error loading page</Text>\n    <Text style={styles.errorText}>{`Domain: ${errorDomain}`}</Text>\n    <Text style={styles.errorText}>{`Error Code: ${errorCode}`}</Text>\n    <Text style={styles.errorText}>{`Description: ${errorDesc}`}</Text>\n  </View>\n);\n\nexport {\n  defaultOriginWhitelist,\n  createOnShouldStartLoadWithRequest,\n  defaultRenderLoading,\n  defaultRenderError,\n};\n\nexport const useWebViewLogic = ({\n  startInLoadingState,\n  onNavigationStateChange,\n  onLoadStart,\n  onLoad,\n  onLoadProgress,\n  onLoadEnd,\n  onError,\n  onHttpErrorProp,\n  onMessageProp,\n  onOpenWindowProp,\n  onRenderProcessGoneProp,\n  onContentProcessDidTerminateProp,\n  originWhitelist,\n  onShouldStartLoadWithRequestProp,\n  onShouldStartLoadWithRequestCallback,\n}: {\n  startInLoadingState?: boolean;\n  onNavigationStateChange?: (event: WebViewNavigation) => void;\n  onLoadStart?: (event: WebViewNavigationEvent) => void;\n  onLoad?: (event: WebViewNavigationEvent) => void;\n  onLoadProgress?: (event: WebViewProgressEvent) => void;\n  onLoadEnd?: (event: WebViewNavigationEvent | WebViewErrorEvent) => void;\n  onError?: (event: WebViewErrorEvent) => void;\n  onHttpErrorProp?: (event: WebViewHttpErrorEvent) => void;\n  onMessageProp?: (event: WebViewMessageEvent) => void;\n  onOpenWindowProp?: (event: WebViewOpenWindowEvent) => void;\n  onRenderProcessGoneProp?: (event: WebViewRenderProcessGoneEvent) => void;\n  onContentProcessDidTerminateProp?: (event: WebViewTerminatedEvent) => void;\n  originWhitelist: readonly string[];\n  onShouldStartLoadWithRequestProp?: OnShouldStartLoadWithRequest;\n  onShouldStartLoadWithRequestCallback: (\n    shouldStart: boolean,\n    url: string,\n    lockIdentifier?: number | undefined\n  ) => void;\n}) => {\n  const [viewState, setViewState] = useState<'IDLE' | 'LOADING' | 'ERROR'>(\n    startInLoadingState ? 'LOADING' : 'IDLE'\n  );\n  const [lastErrorEvent, setLastErrorEvent] = useState<WebViewError | null>(\n    null\n  );\n  const startUrl = useRef<string | null>(null);\n\n  const updateNavigationState = useCallback(\n    (event: WebViewNavigationEvent) => {\n      onNavigationStateChange?.(event.nativeEvent);\n    },\n    [onNavigationStateChange]\n  );\n\n  const onLoadingStart = useCallback(\n    (event: WebViewNavigationEvent) => {\n      // Needed for android\n      startUrl.current = event.nativeEvent.url;\n      // !Needed for android\n\n      onLoadStart?.(event);\n      updateNavigationState(event);\n    },\n    [onLoadStart, updateNavigationState]\n  );\n\n  const onLoadingError = useCallback(\n    (event: WebViewErrorEvent) => {\n      event.persist();\n      if (onError) {\n        onError(event);\n      } else {\n        console.warn('Encountered an error loading page', event.nativeEvent);\n      }\n      onLoadEnd?.(event);\n      if (event.isDefaultPrevented()) {\n        return;\n      }\n      setViewState('ERROR');\n      setLastErrorEvent(event.nativeEvent);\n    },\n    [onError, onLoadEnd]\n  );\n\n  const onHttpError = useCallback(\n    (event: WebViewHttpErrorEvent) => {\n      onHttpErrorProp?.(event);\n    },\n    [onHttpErrorProp]\n  );\n\n  // Android Only\n  const onRenderProcessGone = useCallback(\n    (event: WebViewRenderProcessGoneEvent) => {\n      onRenderProcessGoneProp?.(event);\n    },\n    [onRenderProcessGoneProp]\n  );\n  // !Android Only\n\n  // iOS Only\n  const onContentProcessDidTerminate = useCallback(\n    (event: WebViewTerminatedEvent) => {\n      onContentProcessDidTerminateProp?.(event);\n    },\n    [onContentProcessDidTerminateProp]\n  );\n  // !iOS Only\n\n  const onLoadingFinish = useCallback(\n    (event: WebViewNavigationEvent) => {\n      onLoad?.(event);\n      onLoadEnd?.(event);\n      const {\n        nativeEvent: { url },\n      } = event;\n      // on Android, only if url === startUrl\n      if (Platform.OS !== 'android' || url === startUrl.current) {\n        setViewState('IDLE');\n      }\n      // !on Android, only if url === startUrl\n      updateNavigationState(event);\n    },\n    [onLoad, onLoadEnd, updateNavigationState]\n  );\n\n  const onMessage = useCallback(\n    (event: WebViewMessageEvent) => {\n      onMessageProp?.(event);\n    },\n    [onMessageProp]\n  );\n\n  const onLoadingProgress = useCallback(\n    (event: WebViewProgressEvent) => {\n      const {\n        nativeEvent: { progress },\n      } = event;\n      // patch for Android only\n      if (Platform.OS === 'android' && progress === 1) {\n        setViewState((prevViewState) =>\n          prevViewState === 'LOADING' ? 'IDLE' : prevViewState\n        );\n      }\n      // !patch for Android only\n      onLoadProgress?.(event);\n    },\n    [onLoadProgress]\n  );\n\n  const onShouldStartLoadWithRequest = useMemo(\n    () =>\n      createOnShouldStartLoadWithRequest(\n        onShouldStartLoadWithRequestCallback,\n        originWhitelist,\n        onShouldStartLoadWithRequestProp\n      ),\n    [\n      originWhitelist,\n      onShouldStartLoadWithRequestProp,\n      onShouldStartLoadWithRequestCallback,\n    ]\n  );\n\n  const onOpenWindow = useCallback(\n    (event: WebViewOpenWindowEvent) => {\n      onOpenWindowProp?.(event);\n    },\n    [onOpenWindowProp]\n  );\n\n  return {\n    onShouldStartLoadWithRequest,\n    onLoadingStart,\n    onLoadingProgress,\n    onLoadingError,\n    onLoadingFinish,\n    onHttpError,\n    onRenderProcessGone,\n    onContentProcessDidTerminate,\n    onMessage,\n    onOpenWindow,\n    viewState,\n    setViewState,\n    lastErrorEvent,\n  };\n};\n","import WebView from './WebView';\n\nexport { WebView };\nexport default WebView;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport type {HostComponent} from '../Renderer/shims/ReactNativeTypes';\n\nconst createReactNativeComponentClass = require('../Renderer/shims/createReactNativeComponentClass');\nconst getNativeComponentAttributes = require('./getNativeComponentAttributes');\n\n/**\n * Creates values that can be used like React components which represent native\n * view managers. You should create JavaScript modules that wrap these values so\n * that the results are memoized. Example:\n *\n *   const View = requireNativeComponent('RCTView');\n *\n */\n\nconst requireNativeComponent = <T>(uiViewClassName: string): HostComponent<T> =>\n  ((createReactNativeComponentClass(uiViewClassName, () =>\n    getNativeComponentAttributes(uiViewClassName),\n  ): any): HostComponent<T>);\n\nmodule.exports = requireNativeComponent;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @noformat\n * @flow strict-local\n * @generated SignedSource<<7d3d4090dadea2daa09d92e5e66f6e5d>>\n *\n * This file was sync'd from the facebook/react repository.\n */\n\n'use strict';\n\nimport {ReactNativeViewConfigRegistry} from 'react-native/Libraries/ReactPrivate/ReactNativePrivateInterface';\nimport {type ViewConfig} from './ReactNativeTypes';\n\nconst {register} = ReactNativeViewConfigRegistry;\n\n/**\n * Creates a renderable ReactNative host component.\n * Use this method for view configs that are loaded from UIManager.\n * Use createReactNativeComponentClass() for view configs defined within JavaScript.\n *\n * @param {string} config iOS View configuration.\n * @private\n */\nconst createReactNativeComponentClass = function(\n  name: string,\n  callback: () => ViewConfig,\n): string {\n  return register(name, callback);\n};\n\nmodule.exports = createReactNativeComponentClass;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n// TODO: move this file to shims/ReactNative (requires React update and sync)\n\nimport type {HostComponent} from '../../Libraries/Renderer/shims/ReactNativeTypes';\n\nimport requireNativeComponent from '../../Libraries/ReactNative/requireNativeComponent';\nimport UIManager from '../ReactNative/UIManager';\n\n// TODO: import from CodegenSchema once workspaces are enabled\ntype Options = $ReadOnly<{|\n  interfaceOnly?: boolean,\n  paperComponentName?: string,\n  paperComponentNameDeprecated?: string,\n  excludedPlatforms?: $ReadOnlyArray<'iOS' | 'android'>,\n|}>;\n\nexport type NativeComponentType<T> = HostComponent<T>;\n\n// If this function runs then that means the view configs were not\n// generated at build time using `GenerateViewConfigJs.js`. Thus\n// we need to `requireNativeComponent` to get the view configs from view managers.\n// `requireNativeComponent` is not available in Bridgeless mode.\n// e.g. This function runs at runtime if `codegenNativeComponent` was not called\n// from a file suffixed with NativeComponent.js.\nfunction codegenNativeComponent<Props>(\n  componentName: string,\n  options?: Options,\n): NativeComponentType<Props> {\n  if (global.RN$Bridgeless === true) {\n    const errorMessage =\n      \"Native Component '\" +\n      componentName +\n      \"' that calls codegenNativeComponent was not code generated at build time. Please check its definition.\";\n    console.error(errorMessage);\n  }\n\n  let componentNameInUse =\n    options && options.paperComponentName != null\n      ? options.paperComponentName\n      : componentName;\n\n  if (options != null && options.paperComponentNameDeprecated != null) {\n    if (UIManager.hasViewManagerConfig(componentName)) {\n      componentNameInUse = componentName;\n    } else if (\n      options.paperComponentNameDeprecated != null &&\n      UIManager.hasViewManagerConfig(options.paperComponentNameDeprecated)\n    ) {\n      // $FlowFixMe[incompatible-type]\n      componentNameInUse = options.paperComponentNameDeprecated;\n    } else {\n      throw new Error(\n        `Failed to find native component for either ${componentName} or ${\n          options.paperComponentNameDeprecated ?? '(unknown)'\n        }`,\n      );\n    }\n  }\n\n  return (requireNativeComponent<Props>(\n    // $FlowFixMe[incompatible-call]\n    componentNameInUse,\n  ): HostComponent<Props>);\n}\n\nexport default codegenNativeComponent;\n","'use strict';\n\nconst matchOperatorsRegex = /[|\\\\{}()[\\]^$+*?.-]/g;\n\nmodule.exports = string => {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\treturn string.replace(matchOperatorsRegex, '\\\\$&');\n};\n"],"names":["_reactNative","require","exports","TurboModuleRegistry","getEnforcing","_codegenNativeComponent","_interopRequireDefault","_codegenNativeCommands","codegenNativeCommands","supportedCommands","codegenNativeComponent","_react","_interopRequireWildcard","_invariant","_RNCWebViewNativeComponent","_NativeRNCWebView","_WebViewShared","_WebView","_jsxRuntime","_excluded","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_ref6","resolveAssetSource","Image","useWarnIfChanges","value","name","ref","useRef","current","console","warn","WebViewComponent","forwardRef","_ref","_ref$fraudulentWebsit","fraudulentWebsiteWarningEnabled","_ref$javaScriptEnable","javaScriptEnabled","_ref$cacheEnabled","cacheEnabled","_ref$originWhitelist","originWhitelist","defaultOriginWhitelist","_ref$useSharedProcess","useSharedProcessPool","_ref$textInteractionE","textInteractionEnabled","injectedJavaScript","injectedJavaScriptBeforeContentLoaded","_ref$injectedJavaScri","injectedJavaScriptForMainFrameOnly","_ref$injectedJavaScri2","injectedJavaScriptBeforeContentLoadedForMainFrameOnly","injectedJavaScriptObject","startInLoadingState","onNavigationStateChange","onLoadStart","onError","onLoad","onLoadEnd","onLoadProgress","onContentProcessDidTerminateProp","onContentProcessDidTerminate","onFileDownload","onHttpErrorProp","onHttpError","onMessageProp","onMessage","onOpenWindowProp","onOpenWindow","renderLoading","renderError","style","containerStyle","source","nativeConfig","allowsInlineMediaPlayback","allowsAirPlayForMediaPlayback","mediaPlaybackRequiresUserAction","dataDetectorTypes","incognito","decelerationRateProp","decelerationRate","onShouldStartLoadWithRequestProp","onShouldStartLoadWithRequest","otherProps","_objectWithoutProperties2","webViewRef","onShouldStartLoadWithRequestCallback","useCallback","shouldStart","_url","lockIdentifier","arguments","length","undefined","RNCWebViewModule","shouldStartLoadWithLockIdentifier","_useWebViewLogic","useWebViewLogic","onLoadingStart","viewState","setViewState","lastErrorEvent","onLoadingError","onLoadingFinish","onLoadingProgress","useImperativeHandle","goForward","Commands","goBack","reload","stopLoading","postMessage","data","injectJavaScript","requestFocus","clearCache","includeDiskFiles","otherView","defaultRenderLoading","_lastErrorEvent$code","_lastErrorEvent$descr","invariant","defaultRenderError","domain","code","description","error","webViewStyles","styles","container","webView","webViewContainerStyle","newDecelerationRate","processDecelerationRate","NativeWebView","component","RNCWebView","sourceResolved","newSource","entries","reduce","prev","_ref2","_ref3","_slicedToArray2","currKey","currValue","assign","_defineProperty2","map","_ref4","_ref5","jsx","messagingEnabled","messagingModuleName","hasOnOpenWindowEvent","JSON","stringify","Array","isArray","hasOnFileDownload","props","jsxs","View","children","isFileUploadSupported","_asyncToGenerator2","apply","WebView","StyleSheet","create","flex","overflow","loadingOrErrorView","position","justifyContent","alignItems","height","width","backgroundColor","loadingProgressBar","errorText","fontSize","textAlign","marginBottom","errorTextTitle","fontWeight","flexStart","alignSelf","colorRed","color","_escapeStringRegexp","originWhitelistToRegex","escapeStringRegexp","replace","createOnShouldStartLoadWithRequest","loadRequest","nativeEvent","url","compiledWhitelist","origin","result","exec","extractOrigin","some","x","RegExp","test","passesWhitelist","concat","_toConsumableArray2","compileWhitelist","Linking","canOpenURL","then","supported","openURL","catch","e","ActivityIndicator","errorDomain","errorCode","errorDesc","Text","onRenderProcessGoneProp","_useState","useState","_useState2","_useState3","_useState4","setLastErrorEvent","startUrl","updateNavigationState","event","persist","isDefaultPrevented","onRenderProcessGone","Platform","OS","progress","prevViewState","useMemo","createReactNativeComponentClass","getNativeComponentAttributes","module","uiViewClassName","register","ReactNativeViewConfigRegistry","callback","_requireNativeComponent","_UIManager","componentName","options","global","RN$Bridgeless","errorMessage","componentNameInUse","paperComponentName","paperComponentNameDeprecated","UIManager","hasViewManagerConfig","_options$paperCompone","Error","requireNativeComponent","matchOperatorsRegex","string","TypeError"],"sourceRoot":""}