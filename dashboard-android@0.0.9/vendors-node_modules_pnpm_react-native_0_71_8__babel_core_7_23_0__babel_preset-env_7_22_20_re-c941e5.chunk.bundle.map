{"version":3,"file":"vendors-node_modules_pnpm_react-native_0_71_8__babel_core_7_23_0__babel_preset-env_7_22_20_re-c941e5.chunk.bundle","mappings":"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","sources":["webpack:///../../node_modules/.pnpm/@react-native+assets@1.0.0/node_modules/@react-native/assets/path-support.js","webpack:///../../node_modules/.pnpm/react-native@0.71.8_@babel+core@7.23.0_@babel+preset-env@7.22.20_react@18.2.0/node_modules/react-native/Libraries/BatchedBridge/BatchedBridge.js","webpack:///../../node_modules/.pnpm/react-native@0.71.8_@babel+core@7.23.0_@babel+preset-env@7.22.20_react@18.2.0/node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js","webpack:///../../node_modules/.pnpm/react-native@0.71.8_@babel+core@7.23.0_@babel+preset-env@7.22.20_react@18.2.0/node_modules/react-native/Libraries/BatchedBridge/NativeModules.js","webpack:///../../node_modules/.pnpm/react-native@0.71.8_@babel+core@7.23.0_@babel+preset-env@7.22.20_react@18.2.0/node_modules/react-native/Libraries/EventEmitter/RCTDeviceEventEmitter.js","webpack:///../../node_modules/.pnpm/react-native@0.71.8_@babel+core@7.23.0_@babel+preset-env@7.22.20_react@18.2.0/node_modules/react-native/Libraries/Image/AssetSourceResolver.js","webpack:///../../node_modules/.pnpm/react-native@0.71.8_@babel+core@7.23.0_@babel+preset-env@7.22.20_react@18.2.0/node_modules/react-native/Libraries/Image/AssetUtils.js","webpack:///../../node_modules/.pnpm/react-native@0.71.8_@babel+core@7.23.0_@babel+preset-env@7.22.20_react@18.2.0/node_modules/react-native/Libraries/Performance/Systrace.js","webpack:///../../node_modules/.pnpm/react-native@0.71.8_@babel+core@7.23.0_@babel+preset-env@7.22.20_react@18.2.0/node_modules/react-native/Libraries/TurboModule/TurboModuleRegistry.js","webpack:///../../node_modules/.pnpm/react-native@0.71.8_@babel+core@7.23.0_@babel+preset-env@7.22.20_react@18.2.0/node_modules/react-native/Libraries/Utilities/Dimensions.js","webpack:///../../node_modules/.pnpm/react-native@0.71.8_@babel+core@7.23.0_@babel+preset-env@7.22.20_react@18.2.0/node_modules/react-native/Libraries/Utilities/NativeDeviceInfo.js","webpack:///../../node_modules/.pnpm/react-native@0.71.8_@babel+core@7.23.0_@babel+preset-env@7.22.20_react@18.2.0/node_modules/react-native/Libraries/Utilities/NativePlatformConstantsAndroid.js","webpack:///../../node_modules/.pnpm/react-native@0.71.8_@babel+core@7.23.0_@babel+preset-env@7.22.20_react@18.2.0/node_modules/react-native/Libraries/Utilities/PixelRatio.js","webpack:///../../node_modules/.pnpm/react-native@0.71.8_@babel+core@7.23.0_@babel+preset-env@7.22.20_react@18.2.0/node_modules/react-native/Libraries/Utilities/Platform.android.js","webpack:///../../node_modules/.pnpm/react-native@0.71.8_@babel+core@7.23.0_@babel+preset-env@7.22.20_react@18.2.0/node_modules/react-native/Libraries/Utilities/deepFreezeAndThrowOnMutationInDev.js","webpack:///../../node_modules/.pnpm/react-native@0.71.8_@babel+core@7.23.0_@babel+preset-env@7.22.20_react@18.2.0/node_modules/react-native/Libraries/Utilities/defineLazyObjectProperty.js","webpack:///../../node_modules/.pnpm/react-native@0.71.8_@babel+core@7.23.0_@babel+preset-env@7.22.20_react@18.2.0/node_modules/react-native/Libraries/Utilities/stringifySafe.js","webpack:///../../node_modules/.pnpm/react-native@0.71.8_@babel+core@7.23.0_@babel+preset-env@7.22.20_react@18.2.0/node_modules/react-native/Libraries/Utilities/warnOnce.js","webpack:///../../node_modules/.pnpm/react-native@0.71.8_@babel+core@7.23.0_@babel+preset-env@7.22.20_react@18.2.0/node_modules/react-native/Libraries/vendor/core/ErrorUtils.js","webpack:///../../node_modules/.pnpm/react-native@0.71.8_@babel+core@7.23.0_@babel+preset-env@7.22.20_react@18.2.0/node_modules/react-native/Libraries/vendor/emitter/EventEmitter.js","webpack:///../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/browser.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\nimport type {PackagerAsset} from './registry.js';\n\nconst androidScaleSuffix = {\n  '0.75': 'ldpi',\n  '1': 'mdpi',\n  '1.5': 'hdpi',\n  '2': 'xhdpi',\n  '3': 'xxhdpi',\n  '4': 'xxxhdpi',\n};\n\n/**\n * FIXME: using number to represent discrete scale numbers is fragile in essence because of\n * floating point numbers imprecision.\n */\nfunction getAndroidAssetSuffix(scale: number): string {\n  if (scale.toString() in androidScaleSuffix) {\n    return androidScaleSuffix[scale.toString()];\n  }\n\n  throw new Error('no such scale ' + scale.toString());\n}\n\n// See https://developer.android.com/guide/topics/resources/drawable-resource.html\nconst drawableFileTypes = new Set([\n  'gif',\n  'jpeg',\n  'jpg',\n  'png',\n  'svg',\n  'webp',\n  'xml',\n]);\n\nfunction getAndroidResourceFolderName(\n  asset: PackagerAsset,\n  scale: number,\n): string | $TEMPORARY$string<'raw'> {\n  if (!drawableFileTypes.has(asset.type)) {\n    return 'raw';\n  }\n  const suffix = getAndroidAssetSuffix(scale);\n  if (!suffix) {\n    throw new Error(\n      \"Don't know which android drawable suffix to use for scale: \" +\n        scale +\n        '\\nAsset: ' +\n        JSON.stringify(asset, null, '\\t') +\n        '\\nPossible scales are:' +\n        JSON.stringify(androidScaleSuffix, null, '\\t'),\n    );\n  }\n  return 'drawable-' + suffix;\n}\n\nfunction getAndroidResourceIdentifier(asset: PackagerAsset): string {\n  return (getBasePath(asset) + '/' + asset.name)\n    .toLowerCase()\n    .replace(/\\//g, '_') // Encode folder structure in file name\n    .replace(/([^a-z0-9_])/g, '') // Remove illegal chars\n    .replace(/^assets_/, ''); // Remove \"assets_\" prefix\n}\n\nfunction getBasePath(asset: PackagerAsset): string {\n  const basePath = asset.httpServerLocation;\n  return basePath.startsWith('/') ? basePath.substr(1) : basePath;\n}\n\nmodule.exports = {\n  getAndroidResourceFolderName,\n  getAndroidResourceIdentifier,\n  getBasePath,\n};\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\nconst MessageQueue = require('./MessageQueue');\n\nconst BatchedBridge: MessageQueue = new MessageQueue();\n\n// Wire up the batched bridge on the global object so that we can call into it.\n// Ideally, this would be the inverse relationship. I.e. the native environment\n// provides this global directly with its script embedded. Then this module\n// would export it. A possible fix would be to trim the dependencies in\n// MessageQueue to its minimal features and embed that in the native runtime.\n\nObject.defineProperty(global, '__fbBatchedBridge', {\n  configurable: true,\n  value: BatchedBridge,\n});\n\nmodule.exports = BatchedBridge;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\n'use strict';\n\nconst Systrace = require('../Performance/Systrace');\nconst deepFreezeAndThrowOnMutationInDev = require('../Utilities/deepFreezeAndThrowOnMutationInDev');\nconst stringifySafe = require('../Utilities/stringifySafe').default;\nconst warnOnce = require('../Utilities/warnOnce');\nconst ErrorUtils = require('../vendor/core/ErrorUtils');\nconst invariant = require('invariant');\n\nexport type SpyData = {\n  type: number,\n  module: ?string,\n  method: string | number,\n  args: mixed[],\n  ...\n};\n\nconst TO_JS = 0;\nconst TO_NATIVE = 1;\n\nconst MODULE_IDS = 0;\nconst METHOD_IDS = 1;\nconst PARAMS = 2;\nconst MIN_TIME_BETWEEN_FLUSHES_MS = 5;\n\n// eslint-disable-next-line no-bitwise\nconst TRACE_TAG_REACT_APPS = 1 << 17;\n\nconst DEBUG_INFO_LIMIT = 32;\n\nclass MessageQueue {\n  _lazyCallableModules: {[key: string]: (void) => {...}, ...};\n  _queue: [number[], number[], mixed[], number];\n  _successCallbacks: Map<number, ?(...mixed[]) => void>;\n  _failureCallbacks: Map<number, ?(...mixed[]) => void>;\n  _callID: number;\n  _lastFlush: number;\n  _eventLoopStartTime: number;\n  _reactNativeMicrotasksCallback: ?() => void;\n\n  _debugInfo: {[number]: [number, number], ...};\n  _remoteModuleTable: {[number]: string, ...};\n  _remoteMethodTable: {[number]: $ReadOnlyArray<string>, ...};\n\n  __spy: ?(data: SpyData) => void;\n\n  constructor() {\n    this._lazyCallableModules = {};\n    this._queue = [[], [], [], 0];\n    this._successCallbacks = new Map();\n    this._failureCallbacks = new Map();\n    this._callID = 0;\n    this._lastFlush = 0;\n    this._eventLoopStartTime = Date.now();\n    this._reactNativeMicrotasksCallback = null;\n\n    if (__DEV__) {\n      this._debugInfo = {};\n      this._remoteModuleTable = {};\n      this._remoteMethodTable = {};\n    }\n\n    // $FlowFixMe[cannot-write]\n    this.callFunctionReturnFlushedQueue =\n      // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n      this.callFunctionReturnFlushedQueue.bind(this);\n    // $FlowFixMe[cannot-write]\n    // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n    this.flushedQueue = this.flushedQueue.bind(this);\n\n    // $FlowFixMe[cannot-write]\n    this.invokeCallbackAndReturnFlushedQueue =\n      // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n      this.invokeCallbackAndReturnFlushedQueue.bind(this);\n  }\n\n  /**\n   * Public APIs\n   */\n\n  static spy(spyOrToggle: boolean | ((data: SpyData) => void)) {\n    if (spyOrToggle === true) {\n      MessageQueue.prototype.__spy = info => {\n        console.log(\n          `${info.type === TO_JS ? 'N->JS' : 'JS->N'} : ` +\n            `${info.module != null ? info.module + '.' : ''}${info.method}` +\n            `(${JSON.stringify(info.args)})`,\n        );\n      };\n    } else if (spyOrToggle === false) {\n      MessageQueue.prototype.__spy = null;\n    } else {\n      MessageQueue.prototype.__spy = spyOrToggle;\n    }\n  }\n\n  callFunctionReturnFlushedQueue(\n    module: string,\n    method: string,\n    args: mixed[],\n  ): null | [Array<number>, Array<number>, Array<mixed>, number] {\n    this.__guard(() => {\n      this.__callFunction(module, method, args);\n    });\n\n    return this.flushedQueue();\n  }\n\n  invokeCallbackAndReturnFlushedQueue(\n    cbID: number,\n    args: mixed[],\n  ): null | [Array<number>, Array<number>, Array<mixed>, number] {\n    this.__guard(() => {\n      this.__invokeCallback(cbID, args);\n    });\n\n    return this.flushedQueue();\n  }\n\n  flushedQueue(): null | [Array<number>, Array<number>, Array<mixed>, number] {\n    this.__guard(() => {\n      this.__callReactNativeMicrotasks();\n    });\n\n    const queue = this._queue;\n    this._queue = [[], [], [], this._callID];\n    return queue[0].length ? queue : null;\n  }\n\n  getEventLoopRunningTime(): number {\n    return Date.now() - this._eventLoopStartTime;\n  }\n\n  registerCallableModule(name: string, module: {...}) {\n    this._lazyCallableModules[name] = () => module;\n  }\n\n  registerLazyCallableModule(name: string, factory: void => interface {}) {\n    let module: interface {};\n    let getValue: ?(void) => interface {} = factory;\n    this._lazyCallableModules[name] = () => {\n      if (getValue) {\n        module = getValue();\n        getValue = null;\n      }\n      /* $FlowFixMe[class-object-subtyping] added when improving typing for\n       * this parameters */\n      return module;\n    };\n  }\n\n  getCallableModule(name: string): {...} | null {\n    const getValue = this._lazyCallableModules[name];\n    return getValue ? getValue() : null;\n  }\n\n  callNativeSyncHook(\n    moduleID: number,\n    methodID: number,\n    params: mixed[],\n    onFail: ?(...mixed[]) => void,\n    onSucc: ?(...mixed[]) => void,\n  ): mixed {\n    if (__DEV__) {\n      invariant(\n        global.nativeCallSyncHook,\n        'Calling synchronous methods on native ' +\n          'modules is not supported in Chrome.\\n\\n Consider providing alternative ' +\n          'methods to expose this method in debug mode, e.g. by exposing constants ' +\n          'ahead-of-time.',\n      );\n    }\n    this.processCallbacks(moduleID, methodID, params, onFail, onSucc);\n    return global.nativeCallSyncHook(moduleID, methodID, params);\n  }\n\n  processCallbacks(\n    moduleID: number,\n    methodID: number,\n    params: mixed[],\n    onFail: ?(...mixed[]) => void,\n    onSucc: ?(...mixed[]) => void,\n  ): void {\n    if (onFail || onSucc) {\n      if (__DEV__) {\n        this._debugInfo[this._callID] = [moduleID, methodID];\n        if (this._callID > DEBUG_INFO_LIMIT) {\n          delete this._debugInfo[this._callID - DEBUG_INFO_LIMIT];\n        }\n        if (this._successCallbacks.size > 500) {\n          const info: {[number]: {method: string, module: string}} = {};\n          this._successCallbacks.forEach((_, callID) => {\n            const debug = this._debugInfo[callID];\n            const module = debug && this._remoteModuleTable[debug[0]];\n            const method = debug && this._remoteMethodTable[debug[0]][debug[1]];\n            info[callID] = {module, method};\n          });\n          warnOnce(\n            'excessive-number-of-pending-callbacks',\n            `Please report: Excessive number of pending callbacks: ${\n              this._successCallbacks.size\n            }. Some pending callbacks that might have leaked by never being called from native code: ${stringifySafe(\n              info,\n            )}`,\n          );\n        }\n      }\n      // Encode callIDs into pairs of callback identifiers by shifting left and using the rightmost bit\n      // to indicate fail (0) or success (1)\n      // eslint-disable-next-line no-bitwise\n      onFail && params.push(this._callID << 1);\n      // eslint-disable-next-line no-bitwise\n      onSucc && params.push((this._callID << 1) | 1);\n      this._successCallbacks.set(this._callID, onSucc);\n      this._failureCallbacks.set(this._callID, onFail);\n    }\n    if (__DEV__) {\n      global.nativeTraceBeginAsyncFlow &&\n        global.nativeTraceBeginAsyncFlow(\n          TRACE_TAG_REACT_APPS,\n          'native',\n          this._callID,\n        );\n    }\n    this._callID++;\n  }\n\n  enqueueNativeCall(\n    moduleID: number,\n    methodID: number,\n    params: mixed[],\n    onFail: ?(...mixed[]) => void,\n    onSucc: ?(...mixed[]) => void,\n  ): void {\n    this.processCallbacks(moduleID, methodID, params, onFail, onSucc);\n\n    this._queue[MODULE_IDS].push(moduleID);\n    this._queue[METHOD_IDS].push(methodID);\n\n    if (__DEV__) {\n      // Validate that parameters passed over the bridge are\n      // folly-convertible.  As a special case, if a prop value is a\n      // function it is permitted here, and special-cased in the\n      // conversion.\n      const isValidArgument = (val: mixed): boolean => {\n        switch (typeof val) {\n          case 'undefined':\n          case 'boolean':\n          case 'string':\n            return true;\n          case 'number':\n            return isFinite(val);\n          case 'object':\n            if (val == null) {\n              return true;\n            }\n\n            if (Array.isArray(val)) {\n              return val.every(isValidArgument);\n            }\n\n            for (const k in val) {\n              if (typeof val[k] !== 'function' && !isValidArgument(val[k])) {\n                return false;\n              }\n            }\n\n            return true;\n          case 'function':\n            return false;\n          default:\n            return false;\n        }\n      };\n\n      // Replacement allows normally non-JSON-convertible values to be\n      // seen.  There is ambiguity with string values, but in context,\n      // it should at least be a strong hint.\n      const replacer = (key: string, val: $FlowFixMe) => {\n        const t = typeof val;\n        if (t === 'function') {\n          return '<<Function ' + val.name + '>>';\n        } else if (t === 'number' && !isFinite(val)) {\n          return '<<' + val.toString() + '>>';\n        } else {\n          return val;\n        }\n      };\n\n      // Note that JSON.stringify\n      invariant(\n        isValidArgument(params),\n        '%s is not usable as a native method argument',\n        JSON.stringify(params, replacer),\n      );\n\n      // The params object should not be mutated after being queued\n      deepFreezeAndThrowOnMutationInDev(params);\n    }\n    this._queue[PARAMS].push(params);\n\n    const now = Date.now();\n    if (\n      global.nativeFlushQueueImmediate &&\n      now - this._lastFlush >= MIN_TIME_BETWEEN_FLUSHES_MS\n    ) {\n      const queue = this._queue;\n      this._queue = [[], [], [], this._callID];\n      this._lastFlush = now;\n      global.nativeFlushQueueImmediate(queue);\n    }\n    Systrace.counterEvent('pending_js_to_native_queue', this._queue[0].length);\n    if (__DEV__ && this.__spy && isFinite(moduleID)) {\n      // $FlowFixMe[not-a-function]\n      this.__spy({\n        type: TO_NATIVE,\n        module: this._remoteModuleTable[moduleID],\n        method: this._remoteMethodTable[moduleID][methodID],\n        args: params,\n      });\n    } else if (this.__spy) {\n      this.__spy({\n        type: TO_NATIVE,\n        module: moduleID + '',\n        method: methodID,\n        args: params,\n      });\n    }\n  }\n\n  createDebugLookup(\n    moduleID: number,\n    name: string,\n    methods: ?$ReadOnlyArray<string>,\n  ) {\n    if (__DEV__) {\n      this._remoteModuleTable[moduleID] = name;\n      this._remoteMethodTable[moduleID] = methods || [];\n    }\n  }\n\n  // For JSTimers to register its callback. Otherwise a circular dependency\n  // between modules is introduced. Note that only one callback may be\n  // registered at a time.\n  setReactNativeMicrotasksCallback(fn: () => void) {\n    this._reactNativeMicrotasksCallback = fn;\n  }\n\n  /**\n   * Private methods\n   */\n\n  __guard(fn: () => void) {\n    if (this.__shouldPauseOnThrow()) {\n      fn();\n    } else {\n      try {\n        fn();\n      } catch (error) {\n        ErrorUtils.reportFatalError(error);\n      }\n    }\n  }\n\n  // MessageQueue installs a global handler to catch all exceptions where JS users can register their own behavior\n  // This handler makes all exceptions to be propagated from inside MessageQueue rather than by the VM at their origin\n  // This makes stacktraces to be placed at MessageQueue rather than at where they were launched\n  // The parameter DebuggerInternal.shouldPauseOnThrow is used to check before catching all exceptions and\n  // can be configured by the VM or any Inspector\n  __shouldPauseOnThrow(): boolean {\n    return (\n      // $FlowFixMe[cannot-resolve-name]\n      typeof DebuggerInternal !== 'undefined' &&\n      DebuggerInternal.shouldPauseOnThrow === true\n    );\n  }\n\n  __callReactNativeMicrotasks() {\n    Systrace.beginEvent('JSTimers.callReactNativeMicrotasks()');\n    if (this._reactNativeMicrotasksCallback != null) {\n      this._reactNativeMicrotasksCallback();\n    }\n    Systrace.endEvent();\n  }\n\n  __callFunction(module: string, method: string, args: mixed[]): void {\n    this._lastFlush = Date.now();\n    this._eventLoopStartTime = this._lastFlush;\n    if (__DEV__ || this.__spy) {\n      Systrace.beginEvent(`${module}.${method}(${stringifySafe(args)})`);\n    } else {\n      Systrace.beginEvent(`${module}.${method}(...)`);\n    }\n    if (this.__spy) {\n      this.__spy({type: TO_JS, module, method, args});\n    }\n    const moduleMethods = this.getCallableModule(module);\n    if (!moduleMethods) {\n      const callableModuleNames = Object.keys(this._lazyCallableModules);\n      const n = callableModuleNames.length;\n      const callableModuleNameList = callableModuleNames.join(', ');\n\n      // TODO(T122225939): Remove after investigation: Why are we getting to this line in bridgeless mode?\n      const isBridgelessMode = global.RN$Bridgeless === true ? 'true' : 'false';\n      invariant(\n        false,\n        `Failed to call into JavaScript module method ${module}.${method}(). Module has not been registered as callable. Bridgeless Mode: ${isBridgelessMode}. Registered callable JavaScript modules (n = ${n}): ${callableModuleNameList}.\n        A frequent cause of the error is that the application entry file path is incorrect. This can also happen when the JS bundle is corrupt or there is an early initialization error when loading React Native.`,\n      );\n    }\n    if (!moduleMethods[method]) {\n      invariant(\n        false,\n        `Failed to call into JavaScript module method ${module}.${method}(). Module exists, but the method is undefined.`,\n      );\n    }\n    moduleMethods[method].apply(moduleMethods, args);\n    Systrace.endEvent();\n  }\n\n  __invokeCallback(cbID: number, args: mixed[]): void {\n    this._lastFlush = Date.now();\n    this._eventLoopStartTime = this._lastFlush;\n\n    // The rightmost bit of cbID indicates fail (0) or success (1), the other bits are the callID shifted left.\n    // eslint-disable-next-line no-bitwise\n    const callID = cbID >>> 1;\n    // eslint-disable-next-line no-bitwise\n    const isSuccess = cbID & 1;\n    const callback = isSuccess\n      ? this._successCallbacks.get(callID)\n      : this._failureCallbacks.get(callID);\n\n    if (__DEV__) {\n      const debug = this._debugInfo[callID];\n      const module = debug && this._remoteModuleTable[debug[0]];\n      const method = debug && this._remoteMethodTable[debug[0]][debug[1]];\n      invariant(\n        callback,\n        `No callback found with cbID ${cbID} and callID ${callID} for ` +\n          (method\n            ? ` ${module}.${method} - most likely the callback was already invoked`\n            : `module ${module || '<unknown>'}`) +\n          `. Args: '${stringifySafe(args)}'`,\n      );\n      const profileName = debug\n        ? '<callback for ' + module + '.' + method + '>'\n        : cbID;\n      if (callback && this.__spy) {\n        this.__spy({type: TO_JS, module: null, method: profileName, args});\n      }\n      Systrace.beginEvent(\n        `MessageQueue.invokeCallback(${profileName}, ${stringifySafe(args)})`,\n      );\n    }\n\n    if (!callback) {\n      return;\n    }\n\n    this._successCallbacks.delete(callID);\n    this._failureCallbacks.delete(callID);\n    callback(...args);\n\n    if (__DEV__) {\n      Systrace.endEvent();\n    }\n  }\n}\n\nmodule.exports = MessageQueue;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\nimport type {ExtendedError} from '../Core/ExtendedError';\n\nconst BatchedBridge = require('./BatchedBridge');\nconst invariant = require('invariant');\n\nexport type ModuleConfig = [\n  string /* name */,\n  ?{...} /* constants */,\n  ?$ReadOnlyArray<string> /* functions */,\n  ?$ReadOnlyArray<number> /* promise method IDs */,\n  ?$ReadOnlyArray<number> /* sync method IDs */,\n];\n\nexport type MethodType = 'async' | 'promise' | 'sync';\n\nfunction genModule(\n  config: ?ModuleConfig,\n  moduleID: number,\n): ?{\n  name: string,\n  module?: {...},\n  ...\n} {\n  if (!config) {\n    return null;\n  }\n\n  const [moduleName, constants, methods, promiseMethods, syncMethods] = config;\n  invariant(\n    !moduleName.startsWith('RCT') && !moduleName.startsWith('RK'),\n    \"Module name prefixes should've been stripped by the native side \" +\n      \"but wasn't for \" +\n      moduleName,\n  );\n\n  if (!constants && !methods) {\n    // Module contents will be filled in lazily later\n    return {name: moduleName};\n  }\n\n  const module: {[string]: mixed} = {};\n  methods &&\n    methods.forEach((methodName, methodID) => {\n      const isPromise =\n        (promiseMethods && arrayContains(promiseMethods, methodID)) || false;\n      const isSync =\n        (syncMethods && arrayContains(syncMethods, methodID)) || false;\n      invariant(\n        !isPromise || !isSync,\n        'Cannot have a method that is both async and a sync hook',\n      );\n      const methodType = isPromise ? 'promise' : isSync ? 'sync' : 'async';\n      module[methodName] = genMethod(moduleID, methodID, methodType);\n    });\n\n  Object.assign(module, constants);\n\n  if (module.getConstants == null) {\n    module.getConstants = () => constants || Object.freeze({});\n  } else {\n    console.warn(\n      `Unable to define method 'getConstants()' on NativeModule '${moduleName}'. NativeModule '${moduleName}' already has a constant or method called 'getConstants'. Please remove it.`,\n    );\n  }\n\n  if (__DEV__) {\n    BatchedBridge.createDebugLookup(moduleID, moduleName, methods);\n  }\n\n  return {name: moduleName, module};\n}\n\n// export this method as a global so we can call it from native\nglobal.__fbGenNativeModule = genModule;\n\nfunction loadModule(name: string, moduleID: number): ?{...} {\n  invariant(\n    global.nativeRequireModuleConfig,\n    \"Can't lazily create module without nativeRequireModuleConfig\",\n  );\n  const config = global.nativeRequireModuleConfig(name);\n  const info = genModule(config, moduleID);\n  return info && info.module;\n}\n\nfunction genMethod(moduleID: number, methodID: number, type: MethodType) {\n  let fn = null;\n  if (type === 'promise') {\n    fn = function promiseMethodWrapper(...args: Array<mixed>) {\n      // In case we reject, capture a useful stack trace here.\n      /* $FlowFixMe[class-object-subtyping] added when improving typing for\n       * this parameters */\n      const enqueueingFrameError: ExtendedError = new Error();\n      return new Promise((resolve, reject) => {\n        BatchedBridge.enqueueNativeCall(\n          moduleID,\n          methodID,\n          args,\n          data => resolve(data),\n          errorData =>\n            reject(\n              updateErrorWithErrorData(\n                (errorData: $FlowFixMe),\n                enqueueingFrameError,\n              ),\n            ),\n        );\n      });\n    };\n  } else {\n    fn = function nonPromiseMethodWrapper(...args: Array<mixed>) {\n      const lastArg = args.length > 0 ? args[args.length - 1] : null;\n      const secondLastArg = args.length > 1 ? args[args.length - 2] : null;\n      const hasSuccessCallback = typeof lastArg === 'function';\n      const hasErrorCallback = typeof secondLastArg === 'function';\n      hasErrorCallback &&\n        invariant(\n          hasSuccessCallback,\n          'Cannot have a non-function arg after a function arg.',\n        );\n      // $FlowFixMe[incompatible-type]\n      const onSuccess: ?(mixed) => void = hasSuccessCallback ? lastArg : null;\n      // $FlowFixMe[incompatible-type]\n      const onFail: ?(mixed) => void = hasErrorCallback ? secondLastArg : null;\n      const callbackCount = hasSuccessCallback + hasErrorCallback;\n      const newArgs = args.slice(0, args.length - callbackCount);\n      if (type === 'sync') {\n        return BatchedBridge.callNativeSyncHook(\n          moduleID,\n          methodID,\n          newArgs,\n          onFail,\n          onSuccess,\n        );\n      } else {\n        BatchedBridge.enqueueNativeCall(\n          moduleID,\n          methodID,\n          newArgs,\n          onFail,\n          onSuccess,\n        );\n      }\n    };\n  }\n  // $FlowFixMe[prop-missing]\n  fn.type = type;\n  return fn;\n}\n\nfunction arrayContains<T>(array: $ReadOnlyArray<T>, value: T): boolean {\n  return array.indexOf(value) !== -1;\n}\n\nfunction updateErrorWithErrorData(\n  errorData: {message: string, ...},\n  error: ExtendedError,\n): ExtendedError {\n  /* $FlowFixMe[class-object-subtyping] added when improving typing for this\n   * parameters */\n  return Object.assign(error, errorData || {});\n}\n\nlet NativeModules: {[moduleName: string]: $FlowFixMe, ...} = {};\nif (global.nativeModuleProxy) {\n  NativeModules = global.nativeModuleProxy;\n} else if (!global.nativeExtensions) {\n  const bridgeConfig = global.__fbBatchedBridgeConfig;\n  invariant(\n    bridgeConfig,\n    '__fbBatchedBridgeConfig is not set, cannot invoke native modules',\n  );\n\n  const defineLazyObjectProperty = require('../Utilities/defineLazyObjectProperty');\n  (bridgeConfig.remoteModuleConfig || []).forEach(\n    (config: ModuleConfig, moduleID: number) => {\n      // Initially this config will only contain the module name when running in JSC. The actual\n      // configuration of the module will be lazily loaded.\n      const info = genModule(config, moduleID);\n      if (!info) {\n        return;\n      }\n\n      if (info.module) {\n        NativeModules[info.name] = info.module;\n      }\n      // If there's no module config, define a lazy getter\n      else {\n        defineLazyObjectProperty(NativeModules, info.name, {\n          get: () => loadModule(info.name, moduleID),\n        });\n      }\n    },\n  );\n}\n\nmodule.exports = NativeModules;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport type {IEventEmitter} from '../vendor/emitter/EventEmitter';\n\nimport EventEmitter from '../vendor/emitter/EventEmitter';\n\n// FIXME: use typed events\ntype RCTDeviceEventDefinitions = $FlowFixMe;\n\n/**\n * Global EventEmitter used by the native platform to emit events to JavaScript.\n * Events are identified by globally unique event names.\n *\n * NativeModules that emit events should instead subclass `NativeEventEmitter`.\n */\nexport default (new EventEmitter(): IEventEmitter<RCTDeviceEventDefinitions>);\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nexport type ResolvedAssetSource = {|\n  +__packager_asset: boolean,\n  +width: ?number,\n  +height: ?number,\n  +uri: string,\n  +scale: number,\n|};\n\nimport type {PackagerAsset} from '@react-native/assets/registry';\n\nconst PixelRatio = require('../Utilities/PixelRatio');\nconst Platform = require('../Utilities/Platform');\nconst {pickScale} = require('./AssetUtils');\nconst {\n  getAndroidResourceFolderName,\n  getAndroidResourceIdentifier,\n  getBasePath,\n} = require('@react-native/assets/path-support');\nconst invariant = require('invariant');\n\n/**\n * Returns a path like 'assets/AwesomeModule/icon@2x.png'\n */\nfunction getScaledAssetPath(asset: PackagerAsset): string {\n  const scale = pickScale(asset.scales, PixelRatio.get());\n  const scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';\n  const assetDir = getBasePath(asset);\n  return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;\n}\n\n/**\n * Returns a path like 'drawable-mdpi/icon.png'\n */\nfunction getAssetPathInDrawableFolder(asset: PackagerAsset): string {\n  const scale = pickScale(asset.scales, PixelRatio.get());\n  const drawableFolder = getAndroidResourceFolderName(asset, scale);\n  const fileName = getAndroidResourceIdentifier(asset);\n  return drawableFolder + '/' + fileName + '.' + asset.type;\n}\n\nclass AssetSourceResolver {\n  serverUrl: ?string;\n  // where the jsbundle is being run from\n  jsbundleUrl: ?string;\n  // the asset to resolve\n  asset: PackagerAsset;\n\n  constructor(serverUrl: ?string, jsbundleUrl: ?string, asset: PackagerAsset) {\n    this.serverUrl = serverUrl;\n    this.jsbundleUrl = jsbundleUrl;\n    this.asset = asset;\n  }\n\n  isLoadedFromServer(): boolean {\n    return !!this.serverUrl;\n  }\n\n  isLoadedFromFileSystem(): boolean {\n    return !!(this.jsbundleUrl && this.jsbundleUrl.startsWith('file://'));\n  }\n\n  defaultAsset(): ResolvedAssetSource {\n    if (this.isLoadedFromServer()) {\n      return this.assetServerURL();\n    }\n\n    if (Platform.OS === 'android') {\n      return this.isLoadedFromFileSystem()\n        ? this.drawableFolderInBundle()\n        : this.resourceIdentifierWithoutScale();\n    } else {\n      return this.scaledAssetURLNearBundle();\n    }\n  }\n\n  /**\n   * Returns an absolute URL which can be used to fetch the asset\n   * from the devserver\n   */\n  assetServerURL(): ResolvedAssetSource {\n    invariant(!!this.serverUrl, 'need server to load from');\n    return this.fromSource(\n      this.serverUrl +\n        getScaledAssetPath(this.asset) +\n        '?platform=' +\n        Platform.OS +\n        '&hash=' +\n        this.asset.hash,\n    );\n  }\n\n  /**\n   * Resolves to just the scaled asset filename\n   * E.g. 'assets/AwesomeModule/icon@2x.png'\n   */\n  scaledAssetPath(): ResolvedAssetSource {\n    return this.fromSource(getScaledAssetPath(this.asset));\n  }\n\n  /**\n   * Resolves to where the bundle is running from, with a scaled asset filename\n   * E.g. 'file:///sdcard/bundle/assets/AwesomeModule/icon@2x.png'\n   */\n  scaledAssetURLNearBundle(): ResolvedAssetSource {\n    const path = this.jsbundleUrl || 'file://';\n    return this.fromSource(\n      // Assets can have relative paths outside of the project root.\n      // When bundling them we replace `../` with `_` to make sure they\n      // don't end up outside of the expected assets directory.\n      path + getScaledAssetPath(this.asset).replace(/\\.\\.\\//g, '_'),\n    );\n  }\n\n  /**\n   * The default location of assets bundled with the app, located by\n   * resource identifier\n   * The Android resource system picks the correct scale.\n   * E.g. 'assets_awesomemodule_icon'\n   */\n  resourceIdentifierWithoutScale(): ResolvedAssetSource {\n    invariant(\n      Platform.OS === 'android',\n      'resource identifiers work on Android',\n    );\n    return this.fromSource(getAndroidResourceIdentifier(this.asset));\n  }\n\n  /**\n   * If the jsbundle is running from a sideload location, this resolves assets\n   * relative to its location\n   * E.g. 'file:///sdcard/AwesomeModule/drawable-mdpi/icon.png'\n   */\n  drawableFolderInBundle(): ResolvedAssetSource {\n    const path = this.jsbundleUrl || 'file://';\n    return this.fromSource(path + getAssetPathInDrawableFolder(this.asset));\n  }\n\n  fromSource(source: string): ResolvedAssetSource {\n    return {\n      __packager_asset: true,\n      width: this.asset.width,\n      height: this.asset.height,\n      uri: source,\n      scale: pickScale(this.asset.scales, PixelRatio.get()),\n    };\n  }\n\n  static pickScale: (scales: Array<number>, deviceScale?: number) => number =\n    pickScale;\n}\n\nmodule.exports = AssetSourceResolver;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\nimport PixelRatio from '../Utilities/PixelRatio';\n\nlet cacheBreaker;\nlet warnIfCacheBreakerUnset = true;\n\nexport function pickScale(scales: Array<number>, deviceScale?: number): number {\n  if (deviceScale == null) {\n    deviceScale = PixelRatio.get();\n  }\n  // Packager guarantees that `scales` array is sorted\n  for (let i = 0; i < scales.length; i++) {\n    if (scales[i] >= deviceScale) {\n      return scales[i];\n    }\n  }\n\n  // If nothing matches, device scale is larger than any available\n  // scales, so we return the biggest one. Unless the array is empty,\n  // in which case we default to 1\n  return scales[scales.length - 1] || 1;\n}\n\nexport function setUrlCacheBreaker(appendage: string) {\n  cacheBreaker = appendage;\n}\n\nexport function getUrlCacheBreaker(): string {\n  if (cacheBreaker == null) {\n    if (__DEV__ && warnIfCacheBreakerUnset) {\n      warnIfCacheBreakerUnset = false;\n      console.warn(\n        'AssetUtils.getUrlCacheBreaker: Cache breaker value is unset',\n      );\n    }\n    return '';\n  }\n  return cacheBreaker;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport typeof * as SystraceModule from './Systrace';\n\nconst TRACE_TAG_REACT_APPS = 1 << 17; // eslint-disable-line no-bitwise\n\nlet _asyncCookie = 0;\n\ntype EventName = string | (() => string);\ntype EventArgs = ?{[string]: string};\n\n/**\n * Indicates if the application is currently being traced.\n *\n * Calling methods on this module when the application isn't being traced is\n * cheap, but this method can be used to avoid computing expensive values for\n * those functions.\n *\n * @example\n * if (Systrace.isEnabled()) {\n *   const expensiveArgs = computeExpensiveArgs();\n *   Systrace.beginEvent('myEvent', expensiveArgs);\n * }\n */\nexport function isEnabled(): boolean {\n  return global.nativeTraceIsTracing\n    ? global.nativeTraceIsTracing(TRACE_TAG_REACT_APPS)\n    : Boolean(global.__RCTProfileIsProfiling);\n}\n\n/**\n * @deprecated This function is now a no-op but it's left for backwards\n * compatibility. `isEnabled` will now synchronously check if we're actively\n * profiling or not. This is necessary because we don't have callbacks to know\n * when profiling has started/stopped on Android APIs.\n */\nexport function setEnabled(_doEnable: boolean): void {}\n\n/**\n * Marks the start of a synchronous event that should end in the same stack\n * frame. The end of this event should be marked using the `endEvent` function.\n */\nexport function beginEvent(eventName: EventName, args?: EventArgs): void {\n  if (isEnabled()) {\n    const eventNameString =\n      typeof eventName === 'function' ? eventName() : eventName;\n    global.nativeTraceBeginSection(TRACE_TAG_REACT_APPS, eventNameString, args);\n  }\n}\n\n/**\n * Marks the end of a synchronous event started in the same stack frame.\n */\nexport function endEvent(args?: EventArgs): void {\n  if (isEnabled()) {\n    global.nativeTraceEndSection(TRACE_TAG_REACT_APPS, args);\n  }\n}\n\n/**\n * Marks the start of a potentially asynchronous event. The end of this event\n * should be marked calling the `endAsyncEvent` function with the cookie\n * returned by this function.\n */\nexport function beginAsyncEvent(\n  eventName: EventName,\n  args?: EventArgs,\n): number {\n  const cookie = _asyncCookie;\n  if (isEnabled()) {\n    _asyncCookie++;\n    const eventNameString =\n      typeof eventName === 'function' ? eventName() : eventName;\n    global.nativeTraceBeginAsyncSection(\n      TRACE_TAG_REACT_APPS,\n      eventNameString,\n      cookie,\n      args,\n    );\n  }\n  return cookie;\n}\n\n/**\n * Marks the end of a potentially asynchronous event, which was started with\n * the given cookie.\n */\nexport function endAsyncEvent(\n  eventName: EventName,\n  cookie: number,\n  args?: EventArgs,\n): void {\n  if (isEnabled()) {\n    const eventNameString =\n      typeof eventName === 'function' ? eventName() : eventName;\n    global.nativeTraceEndAsyncSection(\n      TRACE_TAG_REACT_APPS,\n      eventNameString,\n      cookie,\n      args,\n    );\n  }\n}\n\n/**\n * Registers a new value for a counter event.\n */\nexport function counterEvent(eventName: EventName, value: number): void {\n  if (isEnabled()) {\n    const eventNameString =\n      typeof eventName === 'function' ? eventName() : eventName;\n    global.nativeTraceCounter &&\n      global.nativeTraceCounter(TRACE_TAG_REACT_APPS, eventNameString, value);\n  }\n}\n\nif (__DEV__) {\n  const Systrace: SystraceModule = {\n    isEnabled,\n    setEnabled,\n    beginEvent,\n    endEvent,\n    beginAsyncEvent,\n    endAsyncEvent,\n    counterEvent,\n  };\n\n  // The metro require polyfill can not have dependencies (true for all polyfills).\n  // Ensure that `Systrace` is available in polyfill by exposing it globally.\n  global[(global.__METRO_GLOBAL_PREFIX__ || '') + '__SYSTRACE'] = Systrace;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport type {TurboModule} from './RCTExport';\n\nimport invariant from 'invariant';\n\nconst NativeModules = require('../BatchedBridge/NativeModules');\n\nconst turboModuleProxy = global.__turboModuleProxy;\n\nfunction requireModule<T: TurboModule>(name: string): ?T {\n  // Bridgeless mode requires TurboModules\n  if (global.RN$Bridgeless !== true) {\n    // Backward compatibility layer during migration.\n    const legacyModule = NativeModules[name];\n    if (legacyModule != null) {\n      return ((legacyModule: $FlowFixMe): T);\n    }\n  }\n\n  if (turboModuleProxy != null) {\n    const module: ?T = turboModuleProxy(name);\n    return module;\n  }\n\n  return null;\n}\n\nexport function get<T: TurboModule>(name: string): ?T {\n  return requireModule<T>(name);\n}\n\nexport function getEnforcing<T: TurboModule>(name: string): T {\n  const module = requireModule<T>(name);\n  invariant(\n    module != null,\n    `TurboModuleRegistry.getEnforcing(...): '${name}' could not be found. ` +\n      'Verify that a module by this name is registered in the native binary.',\n  );\n  return module;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport RCTDeviceEventEmitter from '../EventEmitter/RCTDeviceEventEmitter';\nimport EventEmitter, {\n  type EventSubscription,\n} from '../vendor/emitter/EventEmitter';\nimport NativeDeviceInfo, {\n  type DimensionsPayload,\n  type DisplayMetrics,\n  type DisplayMetricsAndroid,\n} from './NativeDeviceInfo';\nimport invariant from 'invariant';\n\nconst eventEmitter = new EventEmitter<{\n  change: [DimensionsPayload],\n}>();\nlet dimensionsInitialized = false;\nlet dimensions: DimensionsPayload;\n\nclass Dimensions {\n  /**\n   * NOTE: `useWindowDimensions` is the preferred API for React components.\n   *\n   * Initial dimensions are set before `runApplication` is called so they should\n   * be available before any other require's are run, but may be updated later.\n   *\n   * Note: Although dimensions are available immediately, they may change (e.g\n   * due to device rotation) so any rendering logic or styles that depend on\n   * these constants should try to call this function on every render, rather\n   * than caching the value (for example, using inline styles rather than\n   * setting a value in a `StyleSheet`).\n   *\n   * Example: `const {height, width} = Dimensions.get('window');`\n   *\n   * @param {string} dim Name of dimension as defined when calling `set`.\n   * @returns {DisplayMetrics? | DisplayMetricsAndroid?} Value for the dimension.\n   */\n  static get(dim: string): DisplayMetrics | DisplayMetricsAndroid {\n    invariant(dimensions[dim], 'No dimension set for key ' + dim);\n    return dimensions[dim];\n  }\n\n  /**\n   * This should only be called from native code by sending the\n   * didUpdateDimensions event.\n   *\n   * @param {DimensionsPayload} dims Simple string-keyed object of dimensions to set\n   */\n  static set(dims: $ReadOnly<DimensionsPayload>): void {\n    // We calculate the window dimensions in JS so that we don't encounter loss of\n    // precision in transferring the dimensions (which could be non-integers) over\n    // the bridge.\n    let {screen, window} = dims;\n    const {windowPhysicalPixels} = dims;\n    if (windowPhysicalPixels) {\n      window = {\n        width: windowPhysicalPixels.width / windowPhysicalPixels.scale,\n        height: windowPhysicalPixels.height / windowPhysicalPixels.scale,\n        scale: windowPhysicalPixels.scale,\n        fontScale: windowPhysicalPixels.fontScale,\n      };\n    }\n    const {screenPhysicalPixels} = dims;\n    if (screenPhysicalPixels) {\n      screen = {\n        width: screenPhysicalPixels.width / screenPhysicalPixels.scale,\n        height: screenPhysicalPixels.height / screenPhysicalPixels.scale,\n        scale: screenPhysicalPixels.scale,\n        fontScale: screenPhysicalPixels.fontScale,\n      };\n    } else if (screen == null) {\n      screen = window;\n    }\n\n    dimensions = {window, screen};\n    if (dimensionsInitialized) {\n      // Don't fire 'change' the first time the dimensions are set.\n      eventEmitter.emit('change', dimensions);\n    } else {\n      dimensionsInitialized = true;\n    }\n  }\n\n  /**\n   * Add an event handler. Supported events:\n   *\n   * - `change`: Fires when a property within the `Dimensions` object changes. The argument\n   *   to the event handler is an object with `window` and `screen` properties whose values\n   *   are the same as the return values of `Dimensions.get('window')` and\n   *   `Dimensions.get('screen')`, respectively.\n   */\n  static addEventListener(\n    type: 'change',\n    handler: Function,\n  ): EventSubscription {\n    invariant(\n      type === 'change',\n      'Trying to subscribe to unknown event: \"%s\"',\n      type,\n    );\n    return eventEmitter.addListener(type, handler);\n  }\n}\n\nlet initialDims: ?$ReadOnly<DimensionsPayload> =\n  global.nativeExtensions &&\n  global.nativeExtensions.DeviceInfo &&\n  global.nativeExtensions.DeviceInfo.Dimensions;\nif (!initialDims) {\n  // Subscribe before calling getConstants to make sure we don't miss any updates in between.\n  RCTDeviceEventEmitter.addListener(\n    'didUpdateDimensions',\n    (update: DimensionsPayload) => {\n      Dimensions.set(update);\n    },\n  );\n  initialDims = NativeDeviceInfo.getConstants().Dimensions;\n}\n\nDimensions.set(initialDims);\n\nmodule.exports = Dimensions;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport type {TurboModule} from '../TurboModule/RCTExport';\n\nimport * as TurboModuleRegistry from '../TurboModule/TurboModuleRegistry';\n\nexport type DisplayMetricsAndroid = {|\n  width: number,\n  height: number,\n  scale: number,\n  fontScale: number,\n  densityDpi: number,\n|};\n\nexport type DisplayMetrics = {|\n  width: number,\n  height: number,\n  scale: number,\n  fontScale: number,\n|};\n\nexport type DimensionsPayload = {|\n  window?: DisplayMetrics,\n  screen?: DisplayMetrics,\n  windowPhysicalPixels?: DisplayMetricsAndroid,\n  screenPhysicalPixels?: DisplayMetricsAndroid,\n|};\n\nexport interface Spec extends TurboModule {\n  +getConstants: () => {|\n    +Dimensions: DimensionsPayload,\n    +isIPhoneX_deprecated?: boolean,\n  |};\n}\n\nconst NativeModule: Spec = TurboModuleRegistry.getEnforcing<Spec>('DeviceInfo');\nlet constants = null;\n\nconst NativeDeviceInfo = {\n  getConstants(): {|\n    +Dimensions: DimensionsPayload,\n    +isIPhoneX_deprecated?: boolean,\n  |} {\n    if (constants == null) {\n      constants = NativeModule.getConstants();\n    }\n    return constants;\n  },\n};\n\nexport default NativeDeviceInfo;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport type {TurboModule} from '../TurboModule/RCTExport';\n\nimport * as TurboModuleRegistry from '../TurboModule/TurboModuleRegistry';\n\nexport interface Spec extends TurboModule {\n  +getConstants: () => {|\n    isTesting: boolean,\n    reactNativeVersion: {|\n      major: number,\n      minor: number,\n      patch: number,\n      prerelease: ?number,\n    |},\n    Version: number,\n    Release: string,\n    Serial: string,\n    Fingerprint: string,\n    Model: string,\n    ServerHost?: string,\n    uiMode: string,\n    Brand: string,\n    Manufacturer: string,\n  |};\n  +getAndroidID: () => string;\n}\n\nexport default (TurboModuleRegistry.getEnforcing<Spec>(\n  'PlatformConstants',\n): Spec);\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nconst Dimensions = require('./Dimensions');\n\n/**\n * PixelRatio class gives access to the device pixel density.\n *\n * ## Fetching a correctly sized image\n *\n * You should get a higher resolution image if you are on a high pixel density\n * device. A good rule of thumb is to multiply the size of the image you display\n * by the pixel ratio.\n *\n * ```\n * var image = getImage({\n *   width: PixelRatio.getPixelSizeForLayoutSize(200),\n *   height: PixelRatio.getPixelSizeForLayoutSize(100),\n * });\n * <Image source={image} style={{width: 200, height: 100}} />\n * ```\n *\n * ## Pixel grid snapping\n *\n * In iOS, you can specify positions and dimensions for elements with arbitrary\n * precision, for example 29.674825. But, ultimately the physical display only\n * have a fixed number of pixels, for example 640×960 for iPhone 4 or 750×1334\n * for iPhone 6. iOS tries to be as faithful as possible to the user value by\n * spreading one original pixel into multiple ones to trick the eye. The\n * downside of this technique is that it makes the resulting element look\n * blurry.\n *\n * In practice, we found out that developers do not want this feature and they\n * have to work around it by doing manual rounding in order to avoid having\n * blurry elements. In React Native, we are rounding all the pixels\n * automatically.\n *\n * We have to be careful when to do this rounding. You never want to work with\n * rounded and unrounded values at the same time as you're going to accumulate\n * rounding errors. Having even one rounding error is deadly because a one\n * pixel border may vanish or be twice as big.\n *\n * In React Native, everything in JavaScript and within the layout engine works\n * with arbitrary precision numbers. It's only when we set the position and\n * dimensions of the native element on the main thread that we round. Also,\n * rounding is done relative to the root rather than the parent, again to avoid\n * accumulating rounding errors.\n *\n */\nclass PixelRatio {\n  /**\n   * Returns the device pixel density. Some examples:\n   *\n   *   - PixelRatio.get() === 1\n   *     - mdpi Android devices (160 dpi)\n   *   - PixelRatio.get() === 1.5\n   *     - hdpi Android devices (240 dpi)\n   *   - PixelRatio.get() === 2\n   *     - iPhone 4, 4S\n   *     - iPhone 5, 5c, 5s\n   *     - iPhone 6\n   *     - iPhone 7\n   *     - iPhone 8\n   *     - iPhone SE\n   *     - xhdpi Android devices (320 dpi)\n   *   - PixelRatio.get() === 3\n   *     - iPhone 6 Plus\n   *     - iPhone 7 Plus\n   *     - iPhone 8 Plus\n   *     - iPhone X\n   *     - xxhdpi Android devices (480 dpi)\n   *   - PixelRatio.get() === 3.5\n   *     - Nexus 6\n   */\n  static get(): number {\n    return Dimensions.get('window').scale;\n  }\n\n  /**\n   * Returns the scaling factor for font sizes. This is the ratio that is used to calculate the\n   * absolute font size, so any elements that heavily depend on that should use this to do\n   * calculations.\n   *\n   * If a font scale is not set, this returns the device pixel ratio.\n   *\n   * This reflects the user preference set in:\n   *  - Settings > Display > Font size on Android,\n   *  - Settings > Display & Brightness > Text Size on iOS.\n   */\n  static getFontScale(): number {\n    return Dimensions.get('window').fontScale || PixelRatio.get();\n  }\n\n  /**\n   * Converts a layout size (dp) to pixel size (px).\n   *\n   * Guaranteed to return an integer number.\n   */\n  static getPixelSizeForLayoutSize(layoutSize: number): number {\n    return Math.round(layoutSize * PixelRatio.get());\n  }\n\n  /**\n   * Rounds a layout size (dp) to the nearest layout size that corresponds to\n   * an integer number of pixels. For example, on a device with a PixelRatio\n   * of 3, `PixelRatio.roundToNearestPixel(8.4) = 8.33`, which corresponds to\n   * exactly (8.33 * 3) = 25 pixels.\n   */\n  static roundToNearestPixel(layoutSize: number): number {\n    const ratio = PixelRatio.get();\n    return Math.round(layoutSize * ratio) / ratio;\n  }\n\n  // No-op for iOS, but used on the web. Should not be documented.\n  static startDetecting() {}\n}\n\nmodule.exports = PixelRatio;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\nimport NativePlatformConstantsAndroid from './NativePlatformConstantsAndroid';\n\nexport type PlatformSelectSpec<T> = {\n  android?: T,\n  native?: T,\n  default?: T,\n  ...\n};\n\nconst Platform = {\n  __constants: null,\n  OS: 'android',\n  // $FlowFixMe[unsafe-getters-setters]\n  get Version(): number {\n    // $FlowFixMe[object-this-reference]\n    return this.constants.Version;\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get constants(): {|\n    isTesting: boolean,\n    reactNativeVersion: {|\n      major: number,\n      minor: number,\n      patch: number,\n      prerelease: ?number,\n    |},\n    Version: number,\n    Release: string,\n    Serial: string,\n    Fingerprint: string,\n    Model: string,\n    ServerHost?: string,\n    uiMode: string,\n    Brand: string,\n    Manufacturer: string,\n  |} {\n    // $FlowFixMe[object-this-reference]\n    if (this.__constants == null) {\n      // $FlowFixMe[object-this-reference]\n      this.__constants = NativePlatformConstantsAndroid.getConstants();\n    }\n    // $FlowFixMe[object-this-reference]\n    return this.__constants;\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get isTesting(): boolean {\n    if (__DEV__) {\n      // $FlowFixMe[object-this-reference]\n      return this.constants.isTesting;\n    }\n    return false;\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get isTV(): boolean {\n    // $FlowFixMe[object-this-reference]\n    return this.constants.uiMode === 'tv';\n  },\n  select: <T>(spec: PlatformSelectSpec<T>): T =>\n    'android' in spec\n      ? // $FlowFixMe[incompatible-return]\n        spec.android\n      : 'native' in spec\n      ? // $FlowFixMe[incompatible-return]\n        spec.native\n      : // $FlowFixMe[incompatible-return]\n        spec.default,\n};\n\nmodule.exports = Platform;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\n/**\n * If your application is accepting different values for the same field over\n * time and is doing a diff on them, you can either (1) create a copy or\n * (2) ensure that those values are not mutated behind two passes.\n * This function helps you with (2) by freezing the object and throwing if\n * the user subsequently modifies the value.\n *\n * There are two caveats with this function:\n *   - If the call site is not in strict mode, it will only throw when\n *     mutating existing fields, adding a new one\n *     will unfortunately fail silently :(\n *   - If the object is already frozen or sealed, it will not continue the\n *     deep traversal and will leave leaf nodes unfrozen.\n *\n * Freezing the object and adding the throw mechanism is expensive and will\n * only be used in DEV.\n */\nfunction deepFreezeAndThrowOnMutationInDev<T: {...} | Array<mixed>>(\n  object: T,\n): T {\n  if (__DEV__) {\n    if (\n      typeof object !== 'object' ||\n      object === null ||\n      Object.isFrozen(object) ||\n      Object.isSealed(object)\n    ) {\n      return object;\n    }\n\n    // $FlowFixMe[not-an-object] `object` can be an array, but Object.keys works with arrays too\n    const keys = Object.keys((object: {...} | Array<mixed>));\n    // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n    const hasOwnProperty = Object.prototype.hasOwnProperty;\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      if (hasOwnProperty.call(object, key)) {\n        Object.defineProperty(object, key, {\n          get: identity.bind(null, object[key]),\n        });\n        Object.defineProperty(object, key, {\n          set: throwOnImmutableMutation.bind(null, key),\n        });\n      }\n    }\n\n    Object.freeze(object);\n    Object.seal(object);\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      if (hasOwnProperty.call(object, key)) {\n        deepFreezeAndThrowOnMutationInDev(object[key]);\n      }\n    }\n  }\n  return object;\n}\n\n/* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's\n * LTI update could not be added via codemod */\nfunction throwOnImmutableMutation(key: empty, value) {\n  throw Error(\n    'You attempted to set the key `' +\n      key +\n      '` with the value `' +\n      JSON.stringify(value) +\n      '` on an object that is meant to be immutable ' +\n      'and has been frozen.',\n  );\n}\n\nfunction identity(value: mixed) {\n  return value;\n}\n\nmodule.exports = deepFreezeAndThrowOnMutationInDev;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\n/**\n * Defines a lazily evaluated property on the supplied `object`.\n */\nfunction defineLazyObjectProperty<T>(\n  object: interface {},\n  name: string,\n  descriptor: {\n    get: () => T,\n    enumerable?: boolean,\n    writable?: boolean,\n    ...\n  },\n): void {\n  const {get} = descriptor;\n  const enumerable = descriptor.enumerable !== false;\n  const writable = descriptor.writable !== false;\n\n  let value;\n  let valueSet = false;\n  function getValue(): T {\n    // WORKAROUND: A weird infinite loop occurs where calling `getValue` calls\n    // `setValue` which calls `Object.defineProperty` which somehow triggers\n    // `getValue` again. Adding `valueSet` breaks this loop.\n    if (!valueSet) {\n      // Calling `get()` here can trigger an infinite loop if it fails to\n      // remove the getter on the property, which can happen when executing\n      // JS in a V8 context.  `valueSet = true` will break this loop, and\n      // sets the value of the property to undefined, until the code in `get()`\n      // finishes, at which point the property is set to the correct value.\n      valueSet = true;\n      setValue(get());\n    }\n    return value;\n  }\n  function setValue(newValue: T): void {\n    value = newValue;\n    valueSet = true;\n    Object.defineProperty(object, name, {\n      value: newValue,\n      configurable: true,\n      enumerable,\n      writable,\n    });\n  }\n\n  Object.defineProperty(object, name, {\n    get: getValue,\n    set: setValue,\n    configurable: true,\n    enumerable,\n  });\n}\n\nmodule.exports = defineLazyObjectProperty;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\nimport invariant from 'invariant';\n\n/**\n * Tries to stringify with JSON.stringify and toString, but catches exceptions\n * (e.g. from circular objects) and always returns a string and never throws.\n */\nexport function createStringifySafeWithLimits(limits: {|\n  maxDepth?: number,\n  maxStringLimit?: number,\n  maxArrayLimit?: number,\n  maxObjectKeysLimit?: number,\n|}): mixed => string {\n  const {\n    maxDepth = Number.POSITIVE_INFINITY,\n    maxStringLimit = Number.POSITIVE_INFINITY,\n    maxArrayLimit = Number.POSITIVE_INFINITY,\n    maxObjectKeysLimit = Number.POSITIVE_INFINITY,\n  } = limits;\n  const stack: Array<\n    string | {+[string]: mixed} | {'...(truncated keys)...': number},\n  > = [];\n  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n   * Flow's LTI update could not be added via codemod */\n  function replacer(key: string, value: mixed): mixed {\n    while (stack.length && this !== stack[0]) {\n      stack.shift();\n    }\n\n    if (typeof value === 'string') {\n      const truncatedString = '...(truncated)...';\n      if (value.length > maxStringLimit + truncatedString.length) {\n        return value.substring(0, maxStringLimit) + truncatedString;\n      }\n      return value;\n    }\n    if (typeof value !== 'object' || value === null) {\n      return value;\n    }\n\n    let retval:\n      | string\n      | {+[string]: mixed}\n      | $TEMPORARY$object<{'...(truncated keys)...': number}> = value;\n    if (Array.isArray(value)) {\n      if (stack.length >= maxDepth) {\n        retval = `[ ... array with ${value.length} values ... ]`;\n      } else if (value.length > maxArrayLimit) {\n        retval = value\n          .slice(0, maxArrayLimit)\n          .concat([\n            `... extra ${value.length - maxArrayLimit} values truncated ...`,\n          ]);\n      }\n    } else {\n      // Add refinement after Array.isArray call.\n      invariant(typeof value === 'object', 'This was already found earlier');\n      let keys = Object.keys(value);\n      if (stack.length >= maxDepth) {\n        retval = `{ ... object with ${keys.length} keys ... }`;\n      } else if (keys.length > maxObjectKeysLimit) {\n        // Return a sample of the keys.\n        retval = ({}: {[string]: mixed});\n        for (let k of keys.slice(0, maxObjectKeysLimit)) {\n          retval[k] = value[k];\n        }\n        const truncatedKey = '...(truncated keys)...';\n        retval[truncatedKey] = keys.length - maxObjectKeysLimit;\n      }\n    }\n    stack.unshift(retval);\n    return retval;\n  }\n\n  return function stringifySafe(arg: mixed): string {\n    if (arg === undefined) {\n      return 'undefined';\n    } else if (arg === null) {\n      return 'null';\n    } else if (typeof arg === 'function') {\n      try {\n        return arg.toString();\n      } catch (e) {\n        return '[function unknown]';\n      }\n    } else if (arg instanceof Error) {\n      return arg.name + ': ' + arg.message;\n    } else {\n      // Perform a try catch, just in case the object has a circular\n      // reference or stringify throws for some other reason.\n      try {\n        const ret = JSON.stringify(arg, replacer);\n        if (ret === undefined) {\n          return '[\"' + typeof arg + '\" failed to stringify]';\n        }\n        return ret;\n      } catch (e) {\n        if (typeof arg.toString === 'function') {\n          try {\n            // $FlowFixMe[incompatible-use] : toString shouldn't take any arguments in general.\n            return arg.toString();\n          } catch (E) {}\n        }\n      }\n    }\n    return '[\"' + typeof arg + '\" failed to stringify]';\n  };\n}\n\nconst stringifySafe: mixed => string = createStringifySafeWithLimits({\n  maxDepth: 10,\n  maxStringLimit: 100,\n  maxArrayLimit: 50,\n  maxObjectKeysLimit: 50,\n});\n\nexport default stringifySafe;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\nconst warnedKeys: {[string]: boolean, ...} = {};\n\n/**\n * A simple function that prints a warning message once per session.\n *\n * @param {string} key - The key used to ensure the message is printed once.\n *                       This should be unique to the callsite.\n * @param {string} message - The message to print\n */\nfunction warnOnce(key: string, message: string) {\n  if (warnedKeys[key]) {\n    return;\n  }\n\n  console.warn(message);\n\n  warnedKeys[key] = true;\n}\n\nmodule.exports = warnOnce;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\nimport type {ErrorUtilsT} from '@react-native/polyfills/error-guard';\n\n/**\n * The particular require runtime that we are using looks for a global\n * `ErrorUtils` object and if it exists, then it requires modules with the\n * error handler specified via ErrorUtils.setGlobalHandler by calling the\n * require function with applyWithGuard. Since the require module is loaded\n * before any of the modules, this ErrorUtils must be defined (and the handler\n * set) globally before requiring anything.\n *\n * However, we still want to treat ErrorUtils as a module so that other modules\n * that use it aren't just using a global variable, so simply export the global\n * variable here. ErrorUtils is originally defined in a file named error-guard.js.\n */\nmodule.exports = (global.ErrorUtils: ErrorUtilsT);\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nexport interface EventSubscription {\n  remove(): void;\n}\n\nexport interface IEventEmitter<TEventToArgsMap: {...}> {\n  addListener<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    listener: (...args: $ElementType<TEventToArgsMap, TEvent>) => mixed,\n    context?: mixed,\n  ): EventSubscription;\n\n  emit<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    ...args: $ElementType<TEventToArgsMap, TEvent>\n  ): void;\n\n  removeAllListeners<TEvent: $Keys<TEventToArgsMap>>(eventType?: ?TEvent): void;\n\n  listenerCount<TEvent: $Keys<TEventToArgsMap>>(eventType: TEvent): number;\n}\n\ninterface Registration<TArgs> {\n  +context: mixed;\n  +listener: (...args: TArgs) => mixed;\n  +remove: () => void;\n}\n\ntype Registry<TEventToArgsMap: {...}> = $ObjMap<\n  TEventToArgsMap,\n  <TArgs>(TArgs) => Set<Registration<TArgs>>,\n>;\n\n/**\n * EventEmitter manages listeners and publishes events to them.\n *\n * EventEmitter accepts a single type parameter that defines the valid events\n * and associated listener argument(s).\n *\n * @example\n *\n *   const emitter = new EventEmitter<{\n *     success: [number, string],\n *     error: [Error],\n *   }>();\n *\n *   emitter.on('success', (statusCode, responseText) => {...});\n *   emitter.emit('success', 200, '...');\n *\n *   emitter.on('error', error => {...});\n *   emitter.emit('error', new Error('Resource not found'));\n *\n */\nexport default class EventEmitter<TEventToArgsMap: {...}>\n  implements IEventEmitter<TEventToArgsMap>\n{\n  _registry: Registry<TEventToArgsMap> = {};\n\n  /**\n   * Registers a listener that is called when the supplied event is emitted.\n   * Returns a subscription that has a `remove` method to undo registration.\n   */\n  addListener<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    listener: (...args: $ElementType<TEventToArgsMap, TEvent>) => mixed,\n    context: mixed,\n  ): EventSubscription {\n    const registrations = allocate(this._registry, eventType);\n    const registration: Registration<$ElementType<TEventToArgsMap, TEvent>> = {\n      context,\n      listener,\n      remove(): void {\n        registrations.delete(registration);\n      },\n    };\n    registrations.add(registration);\n    return registration;\n  }\n\n  /**\n   * Emits the supplied event. Additional arguments supplied to `emit` will be\n   * passed through to each of the registered listeners.\n   *\n   * If a listener modifies the listeners registered for the same event, those\n   * changes will not be reflected in the current invocation of `emit`.\n   */\n  emit<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    ...args: $ElementType<TEventToArgsMap, TEvent>\n  ): void {\n    const registrations: ?Set<\n      Registration<$ElementType<TEventToArgsMap, TEvent>>,\n    > = this._registry[eventType];\n    if (registrations != null) {\n      for (const registration of [...registrations]) {\n        registration.listener.apply(registration.context, args);\n      }\n    }\n  }\n\n  /**\n   * Removes all registered listeners.\n   */\n  removeAllListeners<TEvent: $Keys<TEventToArgsMap>>(\n    eventType?: ?TEvent,\n  ): void {\n    if (eventType == null) {\n      this._registry = {};\n    } else {\n      delete this._registry[eventType];\n    }\n  }\n\n  /**\n   * Returns the number of registered listeners for the supplied event.\n   */\n  listenerCount<TEvent: $Keys<TEventToArgsMap>>(eventType: TEvent): number {\n    const registrations: ?Set<Registration<mixed>> = this._registry[eventType];\n    return registrations == null ? 0 : registrations.size;\n  }\n}\n\nfunction allocate<\n  TEventToArgsMap: {...},\n  TEvent: $Keys<TEventToArgsMap>,\n  TEventArgs: $ElementType<TEventToArgsMap, TEvent>,\n>(\n  registry: Registry<TEventToArgsMap>,\n  eventType: TEvent,\n): Set<Registration<TEventArgs>> {\n  let registrations: ?Set<Registration<TEventArgs>> = registry[eventType];\n  if (registrations == null) {\n    registrations = new Set();\n    registry[eventType] = registrations;\n  }\n  return registrations;\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n"],"names":["androidScaleSuffix","drawableFileTypes","Set","getBasePath","asset","basePath","httpServerLocation","startsWith","substr","module","exports","getAndroidResourceFolderName","scale","has","type","suffix","toString","Error","getAndroidAssetSuffix","JSON","stringify","getAndroidResourceIdentifier","name","toLowerCase","replace","BatchedBridge","require","Object","defineProperty","global","configurable","value","_interopRequireDefault","_toConsumableArray2","_classCallCheck2","_createClass2","Systrace","stringifySafe","ErrorUtils","invariant","MessageQueue","default","this","_lazyCallableModules","_queue","_successCallbacks","Map","_failureCallbacks","_callID","_lastFlush","_eventLoopStartTime","Date","now","_reactNativeMicrotasksCallback","callFunctionReturnFlushedQueue","bind","flushedQueue","invokeCallbackAndReturnFlushedQueue","key","method","args","_this","__guard","__callFunction","cbID","_this2","__invokeCallback","_this3","__callReactNativeMicrotasks","queue","length","factory","getValue","moduleID","methodID","params","onFail","onSucc","processCallbacks","nativeCallSyncHook","push","set","nativeFlushQueueImmediate","counterEvent","__spy","methods","__DEV__","fn","__shouldPauseOnThrow","error","reportFatalError","DebuggerInternal","shouldPauseOnThrow","beginEvent","endEvent","moduleMethods","getCallableModule","callableModuleNames","keys","n","callableModuleNameList","join","isBridgelessMode","RN$Bridgeless","apply","callID","callback","get","delete","spyOrToggle","prototype","info","console","log","_slicedToArray2","genModule","config","_config","moduleName","constants","promiseMethods","syncMethods","forEach","methodName","isPromise","arrayContains","isSync","methodType","_len","arguments","Array","_key","enqueueingFrameError","Promise","resolve","reject","enqueueNativeCall","data","errorData","assign","updateErrorWithErrorData","_len2","_key2","lastArg","secondLastArg","hasSuccessCallback","hasErrorCallback","onSuccess","callbackCount","newArgs","slice","callNativeSyncHook","genMethod","getConstants","freeze","warn","array","indexOf","__fbGenNativeModule","NativeModules","nativeModuleProxy","nativeExtensions","bridgeConfig","__fbBatchedBridgeConfig","defineLazyObjectProperty","remoteModuleConfig","nativeRequireModuleConfig","loadModule","_EventEmitter","EventEmitter","PixelRatio","Platform","pickScale","_require2","getScaledAssetPath","scales","scaleSuffix","AssetSourceResolver","serverUrl","jsbundleUrl","isLoadedFromServer","assetServerURL","OS","isLoadedFromFileSystem","drawableFolderInBundle","resourceIdentifierWithoutScale","scaledAssetURLNearBundle","fromSource","hash","path","source","__packager_asset","width","height","uri","cacheBreaker","deviceScale","i","appendage","_PixelRatio","eventName","cookie","_asyncCookie","isEnabled","eventNameString","nativeTraceBeginAsyncSection","TRACE_TAG_REACT_APPS","nativeTraceBeginSection","nativeTraceCounter","nativeTraceEndAsyncSection","nativeTraceEndSection","_doEnable","nativeTraceIsTracing","Boolean","__RCTProfileIsProfiling","requireModule","_invariant","turboModuleProxy","__turboModuleProxy","legacyModule","dimensions","_RCTDeviceEventEmitter","_NativeDeviceInfo","eventEmitter","dimensionsInitialized","Dimensions","dim","dims","screen","window","windowPhysicalPixels","fontScale","screenPhysicalPixels","emit","handler","addListener","initialDims","DeviceInfo","RCTDeviceEventEmitter","update","NativeDeviceInfo","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","NativeModule","obj","__esModule","cache","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","hasOwnProperty","call","desc","_interopRequireWildcard","getEnforcing","TurboModuleRegistry","layoutSize","Math","round","ratio","_NativePlatformConstantsAndroid","__constants","Version","NativePlatformConstantsAndroid","isTesting","isTV","uiMode","select","spec","android","native","object","descriptor","enumerable","writable","valueSet","setValue","newValue","createStringifySafeWithLimits","limits","_limits$maxDepth","maxDepth","Number","POSITIVE_INFINITY","_limits$maxStringLimi","maxStringLimit","_limits$maxArrayLimit","maxArrayLimit","_limits$maxObjectKeys","maxObjectKeysLimit","stack","replacer","shift","truncatedString","substring","retval","isArray","concat","k","unshift","arg","undefined","e","message","ret","E","warnedKeys","_registry","eventType","listener","context","registrations","registry","allocate","registration","remove","add","size","condition","format","a","b","c","d","f","argIndex","framesToPop"],"sourceRoot":""}