{"version":3,"file":"node_modules_pnpm_react-native-webview_13_8_4_react-native_0_71_8_react_18_2_0_node_modules_r-83f1c2.chunk.bundle","mappings":"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","sources":["webpack:///../../node_modules/.pnpm/react-native-webview@13.8.4_react-native@0.71.8_react@18.2.0/node_modules/react-native-webview/src/NativeRNCWebView.ts","webpack:///../../node_modules/.pnpm/react-native-webview@13.8.4_react-native@0.71.8_react@18.2.0/node_modules/react-native-webview/src/RNCWebViewNativeComponent.ts","webpack:///../../node_modules/.pnpm/react-native-webview@13.8.4_react-native@0.71.8_react@18.2.0/node_modules/react-native-webview/src/WebView.android.tsx","webpack:///../../node_modules/.pnpm/react-native-webview@13.8.4_react-native@0.71.8_react@18.2.0/node_modules/react-native-webview/src/WebView.styles.ts","webpack:///../../node_modules/.pnpm/react-native-webview@13.8.4_react-native@0.71.8_react@18.2.0/node_modules/react-native-webview/src/WebViewShared.tsx","webpack:///../../node_modules/.pnpm/react-native-webview@13.8.4_react-native@0.71.8_react@18.2.0/node_modules/react-native-webview/src/index.ts","webpack:///../../node_modules/.pnpm/react-native@0.71.8_@babel+core@7.23.0_@babel+preset-env@7.22.20_react@18.2.0/node_modules/react-native/Libraries/ReactNative/requireNativeComponent.js","webpack:///../../node_modules/.pnpm/react-native@0.71.8_@babel+core@7.23.0_@babel+preset-env@7.22.20_react@18.2.0/node_modules/react-native/Libraries/Renderer/shims/createReactNativeComponentClass.js","webpack:///../../node_modules/.pnpm/react-native@0.71.8_@babel+core@7.23.0_@babel+preset-env@7.22.20_react@18.2.0/node_modules/react-native/Libraries/Utilities/codegenNativeComponent.js","webpack:///../../node_modules/.pnpm/escape-string-regexp@2.0.0/node_modules/escape-string-regexp/index.js"],"sourcesContent":["import type { TurboModule } from 'react-native';\nimport { TurboModuleRegistry } from 'react-native';\nimport { Double } from 'react-native/Libraries/Types/CodegenTypes';\n\nexport interface Spec extends TurboModule {\n  readonly getConstants: () => {};\n\n  // your module methods go here, for example:\n  isFileUploadSupported(): Promise<boolean>;\n  shouldStartLoadWithLockIdentifier(\n    shouldStart: boolean,\n    lockIdentifier: Double\n  ): void;\n}\n\nexport default TurboModuleRegistry.getEnforcing<Spec>('RNCWebView');\n","import type { HostComponent, ViewProps } from 'react-native';\nimport codegenNativeComponent from 'react-native/Libraries/Utilities/codegenNativeComponent';\nimport {\n  DirectEventHandler,\n  Double,\n  Int32,\n  WithDefault,\n} from 'react-native/Libraries/Types/CodegenTypes';\nimport codegenNativeCommands from 'react-native/Libraries/Utilities/codegenNativeCommands';\n\nexport type WebViewNativeEvent = Readonly<{\n  url: string;\n  loading: boolean;\n  title: string;\n  canGoBack: boolean;\n  canGoForward: boolean;\n  lockIdentifier: Double;\n}>;\nexport type WebViewCustomMenuSelectionEvent = Readonly<{\n  label: string;\n  key: string;\n  selectedText: string;\n}>;\nexport type WebViewMessageEvent = Readonly<{\n  url: string;\n  loading: boolean;\n  title: string;\n  canGoBack: boolean;\n  canGoForward: boolean;\n  lockIdentifier: Double;\n  data: string;\n}>;\nexport type WebViewOpenWindowEvent = Readonly<{\n  targetUrl: string;\n}>;\nexport type WebViewHttpErrorEvent = Readonly<{\n  url: string;\n  loading: boolean;\n  title: string;\n  canGoBack: boolean;\n  canGoForward: boolean;\n  lockIdentifier: Double;\n  description: string;\n  statusCode: Int32;\n}>;\n\nexport type WebViewErrorEvent = Readonly<{\n  url: string;\n  loading: boolean;\n  title: string;\n  canGoBack: boolean;\n  canGoForward: boolean;\n  lockIdentifier: Double;\n  domain?: string;\n  code: Int32;\n  description: string;\n}>;\n\nexport type WebViewNativeProgressEvent = Readonly<{\n  url: string;\n  loading: boolean;\n  title: string;\n  canGoBack: boolean;\n  canGoForward: boolean;\n  lockIdentifier: Double;\n  progress: Double;\n}>;\n\nexport type WebViewNavigationEvent = Readonly<{\n  url: string;\n  loading: boolean;\n  title: string;\n  canGoBack: boolean;\n  canGoForward: boolean;\n  lockIdentifier: Double;\n  navigationType:\n    | 'click'\n    | 'formsubmit'\n    | 'backforward'\n    | 'reload'\n    | 'formresubmit'\n    | 'other';\n  mainDocumentURL?: string;\n}>;\n\nexport type ShouldStartLoadRequestEvent = Readonly<{\n  url: string;\n  loading: boolean;\n  title: string;\n  canGoBack: boolean;\n  canGoForward: boolean;\n  lockIdentifier: Double;\n  navigationType:\n    | 'click'\n    | 'formsubmit'\n    | 'backforward'\n    | 'reload'\n    | 'formresubmit'\n    | 'other';\n  mainDocumentURL?: string;\n  isTopFrame: boolean;\n}>;\n\ntype ScrollEvent = Readonly<{\n  contentInset: {\n    bottom: Double;\n    left: Double;\n    right: Double;\n    top: Double;\n  };\n  contentOffset: {\n    y: Double;\n    x: Double;\n  };\n  contentSize: {\n    height: Double;\n    width: Double;\n  };\n  layoutMeasurement: {\n    height: Double;\n    width: Double;\n  };\n  targetContentOffset?: {\n    y: Double;\n    x: Double;\n  };\n  velocity?: {\n    y: Double;\n    x: Double;\n  };\n  zoomScale?: Double;\n  responderIgnoreScroll?: boolean;\n}>;\n\ntype WebViewRenderProcessGoneEvent = Readonly<{\n  didCrash: boolean;\n}>;\n\ntype WebViewDownloadEvent = Readonly<{\n  downloadUrl: string;\n}>;\n\n// type MenuItem = Readonly<{label: string, key: string}>;\n\nexport interface NativeProps extends ViewProps {\n  // Android only\n  allowFileAccess?: boolean;\n  allowsProtectedMedia?: boolean;\n  allowsFullscreenVideo?: boolean;\n  androidLayerType?: WithDefault<'none' | 'software' | 'hardware', 'none'>;\n  cacheMode?: WithDefault<\n    | 'LOAD_DEFAULT'\n    | 'LOAD_CACHE_ELSE_NETWORK'\n    | 'LOAD_NO_CACHE'\n    | 'LOAD_CACHE_ONLY',\n    'LOAD_DEFAULT'\n  >;\n  domStorageEnabled?: boolean;\n  downloadingMessage?: string;\n  forceDarkOn?: boolean;\n  geolocationEnabled?: boolean;\n  lackPermissionToDownloadMessage?: string;\n  messagingModuleName: string;\n  minimumFontSize?: Int32;\n  mixedContentMode?: WithDefault<'never' | 'always' | 'compatibility', 'never'>;\n  nestedScrollEnabled?: boolean;\n  onContentSizeChange?: DirectEventHandler<WebViewNativeEvent>;\n  onRenderProcessGone?: DirectEventHandler<WebViewRenderProcessGoneEvent>;\n  overScrollMode?: string;\n  saveFormDataDisabled?: boolean;\n  scalesPageToFit?: boolean;\n  setBuiltInZoomControls?: boolean;\n  setDisplayZoomControls?: boolean;\n  setSupportMultipleWindows?: boolean;\n  textZoom?: Int32;\n  thirdPartyCookiesEnabled?: boolean;\n  // Workaround to watch if listener if defined\n  hasOnScroll?: boolean;\n  // !Android only\n\n  // iOS only\n  allowingReadAccessToURL?: string;\n  allowsBackForwardNavigationGestures?: boolean;\n  allowsInlineMediaPlayback?: boolean;\n  allowsAirPlayForMediaPlayback?: boolean;\n  allowsLinkPreview?: boolean;\n  automaticallyAdjustContentInsets?: boolean;\n  autoManageStatusBarEnabled?: boolean;\n  bounces?: boolean;\n  contentInset?: Readonly<{\n    top?: Double;\n    left?: Double;\n    bottom?: Double;\n    right?: Double;\n  }>;\n  contentInsetAdjustmentBehavior?: WithDefault<\n    'never' | 'automatic' | 'scrollableAxes' | 'always',\n    'never'\n  >;\n  contentMode?: WithDefault<\n    'recommended' | 'mobile' | 'desktop',\n    'recommended'\n  >;\n  dataDetectorTypes?: WithDefault<\n    ReadonlyArray<\n      | 'address'\n      | 'link'\n      | 'calendarEvent'\n      | 'trackingNumber'\n      | 'flightNumber'\n      | 'lookupSuggestion'\n      | 'phoneNumber'\n      | 'all'\n      | 'none'\n    >,\n    'phoneNumber'\n  >;\n  decelerationRate?: Double;\n  directionalLockEnabled?: boolean;\n  enableApplePay?: boolean;\n  hideKeyboardAccessoryView?: boolean;\n  keyboardDisplayRequiresUserAction?: boolean;\n  limitsNavigationsToAppBoundDomains?: boolean;\n  mediaCapturePermissionGrantType?: WithDefault<\n    | 'prompt'\n    | 'grant'\n    | 'deny'\n    | 'grantIfSameHostElsePrompt'\n    | 'grantIfSameHostElseDeny',\n    'prompt'\n  >;\n  pagingEnabled?: boolean;\n  pullToRefreshEnabled?: boolean;\n  scrollEnabled?: boolean;\n  sharedCookiesEnabled?: boolean;\n  textInteractionEnabled?: boolean;\n  useSharedProcessPool?: boolean;\n  onContentProcessDidTerminate?: DirectEventHandler<WebViewNativeEvent>;\n  onCustomMenuSelection?: DirectEventHandler<WebViewCustomMenuSelectionEvent>;\n  onFileDownload?: DirectEventHandler<WebViewDownloadEvent>;\n\n  menuItems?: ReadonlyArray<Readonly<{ label: string; key: string }>>;\n  suppressMenuItems?: Readonly<string>[];\n  // Workaround to watch if listener if defined\n  hasOnFileDownload?: boolean;\n  fraudulentWebsiteWarningEnabled?: boolean;\n  // !iOS only\n\n  allowFileAccessFromFileURLs?: boolean;\n  allowUniversalAccessFromFileURLs?: boolean;\n  applicationNameForUserAgent?: string;\n  basicAuthCredential?: Readonly<{\n    username: string;\n    password: string;\n  }>;\n  cacheEnabled?: boolean;\n  incognito?: boolean;\n  injectedJavaScript?: string;\n  injectedJavaScriptBeforeContentLoaded?: string;\n  injectedJavaScriptForMainFrameOnly?: boolean;\n  injectedJavaScriptBeforeContentLoadedForMainFrameOnly?: boolean;\n  javaScriptCanOpenWindowsAutomatically?: boolean;\n  javaScriptEnabled?: boolean;\n  webviewDebuggingEnabled?: boolean;\n  mediaPlaybackRequiresUserAction?: boolean;\n  messagingEnabled: boolean;\n  onLoadingError: DirectEventHandler<WebViewErrorEvent>;\n  onLoadingFinish: DirectEventHandler<WebViewNavigationEvent>;\n  onLoadingProgress: DirectEventHandler<WebViewNativeProgressEvent>;\n  onLoadingStart: DirectEventHandler<WebViewNavigationEvent>;\n  onHttpError: DirectEventHandler<WebViewHttpErrorEvent>;\n  onMessage: DirectEventHandler<WebViewMessageEvent>;\n  onOpenWindow?: DirectEventHandler<WebViewOpenWindowEvent>;\n  hasOnOpenWindowEvent?: boolean;\n  onScroll?: DirectEventHandler<ScrollEvent>;\n  onShouldStartLoadWithRequest: DirectEventHandler<ShouldStartLoadRequestEvent>;\n  showsHorizontalScrollIndicator?: boolean;\n  showsVerticalScrollIndicator?: boolean;\n  newSource: Readonly<{\n    uri?: string;\n    method?: string;\n    body?: string;\n\n    headers?: ReadonlyArray<Readonly<{ name: string; value: string }>>;\n    html?: string;\n    baseUrl?: string;\n  }>;\n  userAgent?: string;\n  injectedJavaScriptObject?: string;\n}\n\nexport interface NativeCommands {\n  goBack: (viewRef: React.ElementRef<HostComponent<NativeProps>>) => void;\n  goForward: (viewRef: React.ElementRef<HostComponent<NativeProps>>) => void;\n  reload: (viewRef: React.ElementRef<HostComponent<NativeProps>>) => void;\n  stopLoading: (viewRef: React.ElementRef<HostComponent<NativeProps>>) => void;\n  injectJavaScript: (\n    viewRef: React.ElementRef<HostComponent<NativeProps>>,\n    javascript: string\n  ) => void;\n  requestFocus: (viewRef: React.ElementRef<HostComponent<NativeProps>>) => void;\n  postMessage: (\n    viewRef: React.ElementRef<HostComponent<NativeProps>>,\n    data: string\n  ) => void;\n  // Android Only\n  loadUrl: (\n    viewRef: React.ElementRef<HostComponent<NativeProps>>,\n    url: string\n  ) => void;\n  clearFormData: (\n    viewRef: React.ElementRef<HostComponent<NativeProps>>\n  ) => void;\n  clearCache: (\n    viewRef: React.ElementRef<HostComponent<NativeProps>>,\n    includeDiskFiles: boolean\n  ) => void;\n  clearHistory: (viewRef: React.ElementRef<HostComponent<NativeProps>>) => void;\n  // !Android Only\n}\n\nexport const Commands = codegenNativeCommands<NativeCommands>({\n  supportedCommands: [\n    'goBack',\n    'goForward',\n    'reload',\n    'stopLoading',\n    'injectJavaScript',\n    'requestFocus',\n    'postMessage',\n    'loadUrl',\n    'clearFormData',\n    'clearCache',\n    'clearHistory',\n  ],\n});\n\nexport default codegenNativeComponent<NativeProps>(\n  'RNCWebView'\n) as HostComponent<NativeProps>;\n","import React, {\n  forwardRef,\n  ReactElement,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n} from 'react';\n\nimport { Image, View, ImageSourcePropType, HostComponent } from 'react-native';\n\nimport BatchedBridge from 'react-native/Libraries/BatchedBridge/BatchedBridge';\n\nimport invariant from 'invariant';\n\nimport RNCWebView, { Commands, NativeProps } from './RNCWebViewNativeComponent';\nimport RNCWebViewModule from './NativeRNCWebView';\nimport {\n  defaultOriginWhitelist,\n  defaultRenderError,\n  defaultRenderLoading,\n  useWebViewLogic,\n} from './WebViewShared';\nimport {\n  AndroidWebViewProps,\n  WebViewSourceUri,\n  type WebViewMessageEvent,\n  type ShouldStartLoadRequestEvent,\n} from './WebViewTypes';\n\nimport styles from './WebView.styles';\n\nconst { resolveAssetSource } = Image;\n\nconst registerCallableModule: (name: string, module: Object) => void =\n  // `registerCallableModule()` is available in React Native 0.74 and above.\n  // Fallback to use `BatchedBridge.registerCallableModule()` for older versions.\n\n  require('react-native').registerCallableModule ??\n  BatchedBridge.registerCallableModule.bind(BatchedBridge);\n\n/**\n * A simple counter to uniquely identify WebView instances. Do not use this for anything else.\n */\nlet uniqueRef = 0;\n\nconst WebViewComponent = forwardRef<{}, AndroidWebViewProps>(\n  (\n    {\n      overScrollMode = 'always',\n      javaScriptEnabled = true,\n      thirdPartyCookiesEnabled = true,\n      scalesPageToFit = true,\n      allowsFullscreenVideo = false,\n      allowFileAccess = false,\n      saveFormDataDisabled = false,\n      cacheEnabled = true,\n      androidLayerType = 'none',\n      originWhitelist = defaultOriginWhitelist,\n      setSupportMultipleWindows = true,\n      setBuiltInZoomControls = true,\n      setDisplayZoomControls = false,\n      nestedScrollEnabled = false,\n      startInLoadingState,\n      onNavigationStateChange,\n      onLoadStart,\n      onError,\n      onLoad,\n      onLoadEnd,\n      onLoadProgress,\n      onHttpError: onHttpErrorProp,\n      onRenderProcessGone: onRenderProcessGoneProp,\n      onMessage: onMessageProp,\n      onOpenWindow: onOpenWindowProp,\n      renderLoading,\n      renderError,\n      style,\n      containerStyle,\n      source,\n      nativeConfig,\n      onShouldStartLoadWithRequest: onShouldStartLoadWithRequestProp,\n      injectedJavaScriptObject,\n      ...otherProps\n    },\n    ref\n  ) => {\n    const messagingModuleName = useRef<string>(\n      `WebViewMessageHandler${(uniqueRef += 1)}`\n    ).current;\n    const webViewRef = useRef<React.ComponentRef<\n      HostComponent<NativeProps>\n    > | null>(null);\n\n    const onShouldStartLoadWithRequestCallback = useCallback(\n      (shouldStart: boolean, url: string, lockIdentifier?: number) => {\n        if (lockIdentifier) {\n          RNCWebViewModule.shouldStartLoadWithLockIdentifier(\n            shouldStart,\n            lockIdentifier\n          );\n        } else if (shouldStart && webViewRef.current) {\n          Commands.loadUrl(webViewRef.current, url);\n        }\n      },\n      []\n    );\n\n    const {\n      onLoadingStart,\n      onShouldStartLoadWithRequest,\n      onMessage,\n      viewState,\n      setViewState,\n      lastErrorEvent,\n      onHttpError,\n      onLoadingError,\n      onLoadingFinish,\n      onLoadingProgress,\n      onOpenWindow,\n      onRenderProcessGone,\n    } = useWebViewLogic({\n      onNavigationStateChange,\n      onLoad,\n      onError,\n      onHttpErrorProp,\n      onLoadEnd,\n      onLoadProgress,\n      onLoadStart,\n      onRenderProcessGoneProp,\n      onMessageProp,\n      onOpenWindowProp,\n      startInLoadingState,\n      originWhitelist,\n      onShouldStartLoadWithRequestProp,\n      onShouldStartLoadWithRequestCallback,\n    });\n\n    useImperativeHandle(\n      ref,\n      () => ({\n        goForward: () =>\n          webViewRef.current && Commands.goForward(webViewRef.current),\n        goBack: () => webViewRef.current && Commands.goBack(webViewRef.current),\n        reload: () => {\n          setViewState('LOADING');\n          if (webViewRef.current) {\n            Commands.reload(webViewRef.current);\n          }\n        },\n        stopLoading: () =>\n          webViewRef.current && Commands.stopLoading(webViewRef.current),\n        postMessage: (data: string) =>\n          webViewRef.current && Commands.postMessage(webViewRef.current, data),\n        injectJavaScript: (data: string) =>\n          webViewRef.current &&\n          Commands.injectJavaScript(webViewRef.current, data),\n        requestFocus: () =>\n          webViewRef.current && Commands.requestFocus(webViewRef.current),\n        clearFormData: () =>\n          webViewRef.current && Commands.clearFormData(webViewRef.current),\n        clearCache: (includeDiskFiles: boolean) =>\n          webViewRef.current &&\n          Commands.clearCache(webViewRef.current, includeDiskFiles),\n        clearHistory: () =>\n          webViewRef.current && Commands.clearHistory(webViewRef.current),\n      }),\n      [setViewState, webViewRef]\n    );\n\n    const directEventCallbacks = useMemo(\n      () => ({\n        onShouldStartLoadWithRequest: (\n          event: ShouldStartLoadRequestEvent & { messagingModuleName?: string }\n        ) => {\n          if (event.messagingModuleName === messagingModuleName) {\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            const { messagingModuleName: _, ...rest } = event;\n            onShouldStartLoadWithRequest(rest);\n          }\n        },\n        onMessage: (\n          event: WebViewMessageEvent & { messagingModuleName?: string }\n        ) => {\n          if (event.messagingModuleName === messagingModuleName) {\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            const { messagingModuleName: _, ...rest } = event;\n            onMessage(rest);\n          }\n        },\n      }),\n      [messagingModuleName, onMessage, onShouldStartLoadWithRequest]\n    );\n\n    useEffect(() => {\n      registerCallableModule('RNCWebViewMessagingModule', directEventCallbacks);\n    }, [messagingModuleName, directEventCallbacks]);\n\n    let otherView: ReactElement | undefined;\n    if (viewState === 'LOADING') {\n      otherView = (renderLoading || defaultRenderLoading)();\n    } else if (viewState === 'ERROR') {\n      invariant(\n        lastErrorEvent != null,\n        'lastErrorEvent expected to be non-null'\n      );\n      if (lastErrorEvent) {\n        otherView = (renderError || defaultRenderError)(\n          lastErrorEvent.domain,\n          lastErrorEvent.code,\n          lastErrorEvent.description\n        );\n      }\n    } else if (viewState !== 'IDLE') {\n      console.error(`RNCWebView invalid state encountered: ${viewState}`);\n    }\n\n    const webViewStyles = [styles.container, styles.webView, style];\n    const webViewContainerStyle = [styles.container, containerStyle];\n\n    if (typeof source !== 'number' && source && 'method' in source) {\n      if (source.method === 'POST' && source.headers) {\n        console.warn(\n          'WebView: `source.headers` is not supported when using POST.'\n        );\n      } else if (source.method === 'GET' && source.body) {\n        console.warn('WebView: `source.body` is not supported when using GET.');\n      }\n    }\n\n    const NativeWebView =\n      (nativeConfig?.component as typeof RNCWebView | undefined) || RNCWebView;\n\n    const sourceResolved = resolveAssetSource(source as ImageSourcePropType);\n    const newSource =\n      typeof sourceResolved === 'object'\n        ? Object.entries(sourceResolved as WebViewSourceUri).reduce(\n            (prev, [currKey, currValue]) => {\n              return {\n                ...prev,\n                [currKey]:\n                  currKey === 'headers' &&\n                  currValue &&\n                  typeof currValue === 'object'\n                    ? Object.entries(currValue).map(([key, value]) => {\n                        return {\n                          name: key,\n                          value,\n                        };\n                      })\n                    : currValue,\n              };\n            },\n            {}\n          )\n        : sourceResolved;\n\n    const webView = (\n      <NativeWebView\n        key=\"webViewKey\"\n        {...otherProps}\n        messagingEnabled={typeof onMessageProp === 'function'}\n        messagingModuleName={messagingModuleName}\n        hasOnScroll={!!otherProps.onScroll}\n        onLoadingError={onLoadingError}\n        onLoadingFinish={onLoadingFinish}\n        onLoadingProgress={onLoadingProgress}\n        onLoadingStart={onLoadingStart}\n        onHttpError={onHttpError}\n        onRenderProcessGone={onRenderProcessGone}\n        onMessage={onMessage}\n        onOpenWindow={onOpenWindow}\n        hasOnOpenWindowEvent={onOpenWindowProp !== undefined}\n        onShouldStartLoadWithRequest={onShouldStartLoadWithRequest}\n        ref={webViewRef}\n        // TODO: find a better way to type this.\n        // @ts-expect-error source is old arch\n        source={sourceResolved}\n        newSource={newSource}\n        style={webViewStyles}\n        overScrollMode={overScrollMode}\n        javaScriptEnabled={javaScriptEnabled}\n        thirdPartyCookiesEnabled={thirdPartyCookiesEnabled}\n        scalesPageToFit={scalesPageToFit}\n        allowsFullscreenVideo={allowsFullscreenVideo}\n        allowFileAccess={allowFileAccess}\n        saveFormDataDisabled={saveFormDataDisabled}\n        cacheEnabled={cacheEnabled}\n        androidLayerType={androidLayerType}\n        setSupportMultipleWindows={setSupportMultipleWindows}\n        setBuiltInZoomControls={setBuiltInZoomControls}\n        setDisplayZoomControls={setDisplayZoomControls}\n        nestedScrollEnabled={nestedScrollEnabled}\n        injectedJavaScriptObject={JSON.stringify(injectedJavaScriptObject)}\n        {...nativeConfig?.props}\n      />\n    );\n\n    return (\n      <View style={webViewContainerStyle}>\n        {webView}\n        {otherView}\n      </View>\n    );\n  }\n);\n\n// native implementation should return \"true\" only for Android 5+\nconst { isFileUploadSupported } = RNCWebViewModule;\n\nconst WebView = Object.assign(WebViewComponent, { isFileUploadSupported });\n\nexport default WebView;\n","import { StyleSheet } from 'react-native';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  loadingOrErrorView: {\n    position: 'absolute',\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: '100%',\n    width: '100%',\n    backgroundColor: 'white',\n  },\n  loadingProgressBar: {\n    height: 20,\n  },\n  errorText: {\n    fontSize: 14,\n    textAlign: 'center',\n    marginBottom: 2,\n  },\n  errorTextTitle: {\n    fontSize: 15,\n    fontWeight: '500',\n    marginBottom: 10,\n  },\n  webView: {\n    backgroundColor: '#ffffff',\n  },\n  flexStart: {\n    alignSelf: 'flex-start',\n  },\n  colorRed: {\n    color: 'red',\n  },\n});\n\nexport default styles;\n","import escapeStringRegexp from 'escape-string-regexp';\nimport React, { useCallback, useMemo, useRef, useState } from 'react';\nimport { Linking, View, ActivityIndicator, Text, Platform } from 'react-native';\nimport {\n  OnShouldStartLoadWithRequest,\n  ShouldStartLoadRequestEvent,\n  WebViewError,\n  WebViewErrorEvent,\n  WebViewHttpErrorEvent,\n  WebViewMessageEvent,\n  WebViewNavigation,\n  WebViewNavigationEvent,\n  WebViewOpenWindowEvent,\n  WebViewProgressEvent,\n  WebViewRenderProcessGoneEvent,\n  WebViewTerminatedEvent,\n} from './WebViewTypes';\nimport styles from './WebView.styles';\n\nconst defaultOriginWhitelist = ['http://*', 'https://*'] as const;\n\nconst extractOrigin = (url: string): string => {\n  const result = /^[A-Za-z][A-Za-z0-9+\\-.]+:(\\/\\/)?[^/]*/.exec(url);\n  return result === null ? '' : result[0];\n};\n\nconst originWhitelistToRegex = (originWhitelist: string): string =>\n  `^${escapeStringRegexp(originWhitelist).replace(/\\\\\\*/g, '.*')}`;\n\nconst passesWhitelist = (compiledWhitelist: readonly string[], url: string) => {\n  const origin = extractOrigin(url);\n  return compiledWhitelist.some((x) => new RegExp(x).test(origin));\n};\n\nconst compileWhitelist = (\n  originWhitelist: readonly string[]\n): readonly string[] =>\n  ['about:blank', ...(originWhitelist || [])].map(originWhitelistToRegex);\n\nconst createOnShouldStartLoadWithRequest = (\n  loadRequest: (\n    shouldStart: boolean,\n    url: string,\n    lockIdentifier: number\n  ) => void,\n  originWhitelist: readonly string[],\n  onShouldStartLoadWithRequest?: OnShouldStartLoadWithRequest\n) => {\n  return ({ nativeEvent }: ShouldStartLoadRequestEvent) => {\n    let shouldStart = true;\n    const { url, lockIdentifier } = nativeEvent;\n\n    if (!passesWhitelist(compileWhitelist(originWhitelist), url)) {\n      Linking.canOpenURL(url)\n        .then((supported) => {\n          if (supported) {\n            return Linking.openURL(url);\n          }\n          console.warn(`Can't open url: ${url}`);\n          return undefined;\n        })\n        .catch((e) => {\n          console.warn('Error opening URL: ', e);\n        });\n      shouldStart = false;\n    } else if (onShouldStartLoadWithRequest) {\n      shouldStart = onShouldStartLoadWithRequest(nativeEvent);\n    }\n\n    loadRequest(shouldStart, url, lockIdentifier);\n  };\n};\n\nconst defaultRenderLoading = () => (\n  <View style={styles.loadingOrErrorView}>\n    <ActivityIndicator />\n  </View>\n);\nconst defaultRenderError = (\n  errorDomain: string | undefined,\n  errorCode: number,\n  errorDesc: string\n) => (\n  <View style={styles.loadingOrErrorView}>\n    <Text style={styles.errorTextTitle}>Error loading page</Text>\n    <Text style={styles.errorText}>{`Domain: ${errorDomain}`}</Text>\n    <Text style={styles.errorText}>{`Error Code: ${errorCode}`}</Text>\n    <Text style={styles.errorText}>{`Description: ${errorDesc}`}</Text>\n  </View>\n);\n\nexport {\n  defaultOriginWhitelist,\n  createOnShouldStartLoadWithRequest,\n  defaultRenderLoading,\n  defaultRenderError,\n};\n\nexport const useWebViewLogic = ({\n  startInLoadingState,\n  onNavigationStateChange,\n  onLoadStart,\n  onLoad,\n  onLoadProgress,\n  onLoadEnd,\n  onError,\n  onHttpErrorProp,\n  onMessageProp,\n  onOpenWindowProp,\n  onRenderProcessGoneProp,\n  onContentProcessDidTerminateProp,\n  originWhitelist,\n  onShouldStartLoadWithRequestProp,\n  onShouldStartLoadWithRequestCallback,\n}: {\n  startInLoadingState?: boolean;\n  onNavigationStateChange?: (event: WebViewNavigation) => void;\n  onLoadStart?: (event: WebViewNavigationEvent) => void;\n  onLoad?: (event: WebViewNavigationEvent) => void;\n  onLoadProgress?: (event: WebViewProgressEvent) => void;\n  onLoadEnd?: (event: WebViewNavigationEvent | WebViewErrorEvent) => void;\n  onError?: (event: WebViewErrorEvent) => void;\n  onHttpErrorProp?: (event: WebViewHttpErrorEvent) => void;\n  onMessageProp?: (event: WebViewMessageEvent) => void;\n  onOpenWindowProp?: (event: WebViewOpenWindowEvent) => void;\n  onRenderProcessGoneProp?: (event: WebViewRenderProcessGoneEvent) => void;\n  onContentProcessDidTerminateProp?: (event: WebViewTerminatedEvent) => void;\n  originWhitelist: readonly string[];\n  onShouldStartLoadWithRequestProp?: OnShouldStartLoadWithRequest;\n  onShouldStartLoadWithRequestCallback: (\n    shouldStart: boolean,\n    url: string,\n    lockIdentifier?: number | undefined\n  ) => void;\n}) => {\n  const [viewState, setViewState] = useState<'IDLE' | 'LOADING' | 'ERROR'>(\n    startInLoadingState ? 'LOADING' : 'IDLE'\n  );\n  const [lastErrorEvent, setLastErrorEvent] = useState<WebViewError | null>(\n    null\n  );\n  const startUrl = useRef<string | null>(null);\n\n  const updateNavigationState = useCallback(\n    (event: WebViewNavigationEvent) => {\n      onNavigationStateChange?.(event.nativeEvent);\n    },\n    [onNavigationStateChange]\n  );\n\n  const onLoadingStart = useCallback(\n    (event: WebViewNavigationEvent) => {\n      // Needed for android\n      startUrl.current = event.nativeEvent.url;\n      // !Needed for android\n\n      onLoadStart?.(event);\n      updateNavigationState(event);\n    },\n    [onLoadStart, updateNavigationState]\n  );\n\n  const onLoadingError = useCallback(\n    (event: WebViewErrorEvent) => {\n      event.persist();\n      if (onError) {\n        onError(event);\n      } else {\n        console.warn('Encountered an error loading page', event.nativeEvent);\n      }\n      onLoadEnd?.(event);\n      if (event.isDefaultPrevented()) {\n        return;\n      }\n      setViewState('ERROR');\n      setLastErrorEvent(event.nativeEvent);\n    },\n    [onError, onLoadEnd]\n  );\n\n  const onHttpError = useCallback(\n    (event: WebViewHttpErrorEvent) => {\n      onHttpErrorProp?.(event);\n    },\n    [onHttpErrorProp]\n  );\n\n  // Android Only\n  const onRenderProcessGone = useCallback(\n    (event: WebViewRenderProcessGoneEvent) => {\n      onRenderProcessGoneProp?.(event);\n    },\n    [onRenderProcessGoneProp]\n  );\n  // !Android Only\n\n  // iOS Only\n  const onContentProcessDidTerminate = useCallback(\n    (event: WebViewTerminatedEvent) => {\n      onContentProcessDidTerminateProp?.(event);\n    },\n    [onContentProcessDidTerminateProp]\n  );\n  // !iOS Only\n\n  const onLoadingFinish = useCallback(\n    (event: WebViewNavigationEvent) => {\n      onLoad?.(event);\n      onLoadEnd?.(event);\n      const {\n        nativeEvent: { url },\n      } = event;\n      // on Android, only if url === startUrl\n      if (Platform.OS !== 'android' || url === startUrl.current) {\n        setViewState('IDLE');\n      }\n      // !on Android, only if url === startUrl\n      updateNavigationState(event);\n    },\n    [onLoad, onLoadEnd, updateNavigationState]\n  );\n\n  const onMessage = useCallback(\n    (event: WebViewMessageEvent) => {\n      onMessageProp?.(event);\n    },\n    [onMessageProp]\n  );\n\n  const onLoadingProgress = useCallback(\n    (event: WebViewProgressEvent) => {\n      const {\n        nativeEvent: { progress },\n      } = event;\n      // patch for Android only\n      if (Platform.OS === 'android' && progress === 1) {\n        setViewState((prevViewState) =>\n          prevViewState === 'LOADING' ? 'IDLE' : prevViewState\n        );\n      }\n      // !patch for Android only\n      onLoadProgress?.(event);\n    },\n    [onLoadProgress]\n  );\n\n  const onShouldStartLoadWithRequest = useMemo(\n    () =>\n      createOnShouldStartLoadWithRequest(\n        onShouldStartLoadWithRequestCallback,\n        originWhitelist,\n        onShouldStartLoadWithRequestProp\n      ),\n    [\n      originWhitelist,\n      onShouldStartLoadWithRequestProp,\n      onShouldStartLoadWithRequestCallback,\n    ]\n  );\n\n  const onOpenWindow = useCallback(\n    (event: WebViewOpenWindowEvent) => {\n      onOpenWindowProp?.(event);\n    },\n    [onOpenWindowProp]\n  );\n\n  return {\n    onShouldStartLoadWithRequest,\n    onLoadingStart,\n    onLoadingProgress,\n    onLoadingError,\n    onLoadingFinish,\n    onHttpError,\n    onRenderProcessGone,\n    onContentProcessDidTerminate,\n    onMessage,\n    onOpenWindow,\n    viewState,\n    setViewState,\n    lastErrorEvent,\n  };\n};\n","import WebView from './WebView';\n\nexport { WebView };\nexport default WebView;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport type {HostComponent} from '../Renderer/shims/ReactNativeTypes';\n\nconst createReactNativeComponentClass = require('../Renderer/shims/createReactNativeComponentClass');\nconst getNativeComponentAttributes = require('./getNativeComponentAttributes');\n\n/**\n * Creates values that can be used like React components which represent native\n * view managers. You should create JavaScript modules that wrap these values so\n * that the results are memoized. Example:\n *\n *   const View = requireNativeComponent('RCTView');\n *\n */\n\nconst requireNativeComponent = <T>(uiViewClassName: string): HostComponent<T> =>\n  ((createReactNativeComponentClass(uiViewClassName, () =>\n    getNativeComponentAttributes(uiViewClassName),\n  ): any): HostComponent<T>);\n\nmodule.exports = requireNativeComponent;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @noformat\n * @flow strict-local\n * @generated SignedSource<<7d3d4090dadea2daa09d92e5e66f6e5d>>\n *\n * This file was sync'd from the facebook/react repository.\n */\n\n'use strict';\n\nimport {ReactNativeViewConfigRegistry} from 'react-native/Libraries/ReactPrivate/ReactNativePrivateInterface';\nimport {type ViewConfig} from './ReactNativeTypes';\n\nconst {register} = ReactNativeViewConfigRegistry;\n\n/**\n * Creates a renderable ReactNative host component.\n * Use this method for view configs that are loaded from UIManager.\n * Use createReactNativeComponentClass() for view configs defined within JavaScript.\n *\n * @param {string} config iOS View configuration.\n * @private\n */\nconst createReactNativeComponentClass = function(\n  name: string,\n  callback: () => ViewConfig,\n): string {\n  return register(name, callback);\n};\n\nmodule.exports = createReactNativeComponentClass;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n// TODO: move this file to shims/ReactNative (requires React update and sync)\n\nimport type {HostComponent} from '../../Libraries/Renderer/shims/ReactNativeTypes';\n\nimport requireNativeComponent from '../../Libraries/ReactNative/requireNativeComponent';\nimport UIManager from '../ReactNative/UIManager';\n\n// TODO: import from CodegenSchema once workspaces are enabled\ntype Options = $ReadOnly<{|\n  interfaceOnly?: boolean,\n  paperComponentName?: string,\n  paperComponentNameDeprecated?: string,\n  excludedPlatforms?: $ReadOnlyArray<'iOS' | 'android'>,\n|}>;\n\nexport type NativeComponentType<T> = HostComponent<T>;\n\n// If this function runs then that means the view configs were not\n// generated at build time using `GenerateViewConfigJs.js`. Thus\n// we need to `requireNativeComponent` to get the view configs from view managers.\n// `requireNativeComponent` is not available in Bridgeless mode.\n// e.g. This function runs at runtime if `codegenNativeComponent` was not called\n// from a file suffixed with NativeComponent.js.\nfunction codegenNativeComponent<Props>(\n  componentName: string,\n  options?: Options,\n): NativeComponentType<Props> {\n  if (global.RN$Bridgeless === true) {\n    const errorMessage =\n      \"Native Component '\" +\n      componentName +\n      \"' that calls codegenNativeComponent was not code generated at build time. Please check its definition.\";\n    console.error(errorMessage);\n  }\n\n  let componentNameInUse =\n    options && options.paperComponentName != null\n      ? options.paperComponentName\n      : componentName;\n\n  if (options != null && options.paperComponentNameDeprecated != null) {\n    if (UIManager.hasViewManagerConfig(componentName)) {\n      componentNameInUse = componentName;\n    } else if (\n      options.paperComponentNameDeprecated != null &&\n      UIManager.hasViewManagerConfig(options.paperComponentNameDeprecated)\n    ) {\n      // $FlowFixMe[incompatible-type]\n      componentNameInUse = options.paperComponentNameDeprecated;\n    } else {\n      throw new Error(\n        `Failed to find native component for either ${componentName} or ${\n          options.paperComponentNameDeprecated ?? '(unknown)'\n        }`,\n      );\n    }\n  }\n\n  return (requireNativeComponent<Props>(\n    // $FlowFixMe[incompatible-call]\n    componentNameInUse,\n  ): HostComponent<Props>);\n}\n\nexport default codegenNativeComponent;\n","'use strict';\n\nconst matchOperatorsRegex = /[|\\\\{}()[\\]^$+*?.-]/g;\n\nmodule.exports = string => {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\treturn string.replace(matchOperatorsRegex, '\\\\$&');\n};\n"],"names":["_reactNative","require","exports","TurboModuleRegistry","getEnforcing","_codegenNativeComponent","_interopRequireDefault","_codegenNativeCommands","codegenNativeCommands","supportedCommands","codegenNativeComponent","_require$registerCall","_react","_interopRequireWildcard","_BatchedBridge","_invariant","_RNCWebViewNativeComponent","_NativeRNCWebView","_WebViewShared","_WebView","_jsxRuntime","_excluded","_excluded2","_excluded3","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","resolveAssetSource","Image","registerCallableModule","BatchedBridge","bind","uniqueRef","WebViewComponent","forwardRef","_ref","ref","_ref$overScrollMode","overScrollMode","_ref$javaScriptEnable","javaScriptEnabled","_ref$thirdPartyCookie","thirdPartyCookiesEnabled","_ref$scalesPageToFit","scalesPageToFit","_ref$allowsFullscreen","allowsFullscreenVideo","_ref$allowFileAccess","allowFileAccess","_ref$saveFormDataDisa","saveFormDataDisabled","_ref$cacheEnabled","cacheEnabled","_ref$androidLayerType","androidLayerType","_ref$originWhitelist","originWhitelist","defaultOriginWhitelist","_ref$setSupportMultip","setSupportMultipleWindows","_ref$setBuiltInZoomCo","setBuiltInZoomControls","_ref$setDisplayZoomCo","setDisplayZoomControls","_ref$nestedScrollEnab","nestedScrollEnabled","startInLoadingState","onNavigationStateChange","onLoadStart","onError","onLoad","onLoadEnd","onLoadProgress","onHttpErrorProp","onHttpError","onRenderProcessGoneProp","onRenderProcessGone","onMessageProp","onMessage","onOpenWindowProp","onOpenWindow","renderLoading","renderError","style","containerStyle","source","nativeConfig","onShouldStartLoadWithRequestProp","onShouldStartLoadWithRequest","injectedJavaScriptObject","otherProps","_objectWithoutProperties2","messagingModuleName","useRef","current","webViewRef","onShouldStartLoadWithRequestCallback","useCallback","shouldStart","url","lockIdentifier","RNCWebViewModule","shouldStartLoadWithLockIdentifier","Commands","loadUrl","_useWebViewLogic","useWebViewLogic","onLoadingStart","viewState","setViewState","lastErrorEvent","onLoadingError","onLoadingFinish","onLoadingProgress","useImperativeHandle","goForward","goBack","reload","stopLoading","postMessage","data","injectJavaScript","requestFocus","clearFormData","clearCache","includeDiskFiles","clearHistory","otherView","directEventCallbacks","useMemo","event","rest","useEffect","defaultRenderLoading","invariant","defaultRenderError","domain","code","description","console","error","webViewStyles","styles","container","webView","webViewContainerStyle","method","headers","warn","body","NativeWebView","component","RNCWebView","sourceResolved","newSource","entries","reduce","prev","_ref2","_ref3","_slicedToArray2","currKey","currValue","assign","_defineProperty2","map","_ref4","_ref5","name","value","jsx","messagingEnabled","hasOnScroll","onScroll","hasOnOpenWindowEvent","undefined","JSON","stringify","props","jsxs","View","children","isFileUploadSupported","WebView","StyleSheet","create","flex","overflow","loadingOrErrorView","position","justifyContent","alignItems","height","width","backgroundColor","loadingProgressBar","errorText","fontSize","textAlign","marginBottom","errorTextTitle","fontWeight","flexStart","alignSelf","colorRed","color","_escapeStringRegexp","originWhitelistToRegex","escapeStringRegexp","replace","createOnShouldStartLoadWithRequest","loadRequest","nativeEvent","compiledWhitelist","origin","result","exec","extractOrigin","some","x","RegExp","test","passesWhitelist","concat","_toConsumableArray2","compileWhitelist","Linking","canOpenURL","then","supported","openURL","catch","e","ActivityIndicator","errorDomain","errorCode","errorDesc","Text","onContentProcessDidTerminateProp","_useState","useState","_useState2","_useState3","_useState4","setLastErrorEvent","startUrl","updateNavigationState","persist","isDefaultPrevented","onContentProcessDidTerminate","Platform","OS","progress","prevViewState","createReactNativeComponentClass","getNativeComponentAttributes","module","uiViewClassName","register","ReactNativeViewConfigRegistry","callback","_requireNativeComponent","_UIManager","componentName","options","global","RN$Bridgeless","errorMessage","componentNameInUse","paperComponentName","paperComponentNameDeprecated","UIManager","hasViewManagerConfig","_options$paperCompone","Error","requireNativeComponent","matchOperatorsRegex","string","TypeError"],"sourceRoot":""}